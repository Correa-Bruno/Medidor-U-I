
AVRASM ver. 2.1.57  C:\Users\crist\Desktop\Kituu\Uader\2 Año - 2 Cuatrimestre\Sistemas Digitales IV\Trabajo Final\SDIV-ASMBL\Medidor de U  I.asm Sat Aug 15 00:43:45 2020

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m328Pdef.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328PDEF_INC_
                 #define _M328PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328P
                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * MULTIMEDIDOR DE CC
                  *
                  * 
                  *   Author: De Battista Cristian y Errecart Matias
                  *	 Oyente por Zoom: Correa Bruno, Alias "el arruinau"
                  */ 
                  ;########################################################################################################################################## 
                  ;############################################################### DECLARACION ##############################################################
                  ;##########################################################################################################################################
                 
                 .def	ENTEROL=r12				;Subrutina mostrar
                 .def	ENTEROH=r13				;Subrutina mostrar
                 .def	RestoL=r14				;Subrutina division
                 .def	RestoH=r15				;Subrutina division
                 .def	DividendoL=r16			;Subrutina division
                 .def	DividendoH=r17			;Subrutina division
                 .def	DivisorL=r18			;Subrutina division
                 .def	DivisorH=r19			;Subrutina division
                 .def	Contador=r20			;Subrutina division
                 .def	rBin2L=r21				;Subrutina descomposicion
                 .def	rBin2H=r22				;Subrutina descomposicion
                 .def	rmp=r23					;Subrutina descomposicion
                 
                 .MACRO	PUSH_SREG				;Guardo en la pila la posicion de memoria
                 		push r13
                 		in r13, SREG			;guardar registro de tranjo 12 tmb 
                 		push r13
                 		push r12
                 		push r14
                 		push r15
                 		push r16
                 		push r17
                 		push r18
                 		push r19
                 		push r20
                 		push r21
                 		push r22
                 		push r23
                 		push r24
                 		push r25
                 		push r26
                 		push r27
                 .ENDMACRO
                 
                 .MACRO	POP_SREG
                 		pop r27
                 		pop r26
                 		pop r25
                 		pop r24
                 		pop r23
                 		pop r22
                 		pop r21
                 		pop r20
                 		pop r19
                 		pop r18
                 		pop r17
                 		pop r16
                 		pop r15
                 		pop r14
                 		pop r12
                 		pop r13
                 		out sreg, r13				;recupero de la pila la posicion de memoria
                 		pop r13
                 .ENDMACRO
                 
                 .DSEG
                 .ORG 0x100
000100           	VAL_TensionADCH: .Byte 1
000101           	VAL_TensionADCL: .Byte 1
000102           	VAL_CorrienteADCH: .Byte 1
000103           	VAL_CorrienteADCL: .Byte 1
000104           	TensionH: .Byte 1
000105           	TensionL: .Byte 1
000106           	PotenciaH: .Byte 1
000107           	PotenciaL: .Byte 1
000108           	CorrienteH: .Byte 1
000109           	CorrienteL: .Byte 1
00010a           	RestodivL: .Byte 1
00010b           	RestodivH: .Byte 1
00010c           	VECTOR: .Byte 5
000111           	DATO_RX: .Byte 1
000112           	GRANDEH: .Byte 1
000113           	GRANDEL: .Byte 1
000114           	Temp1: .Byte 1
000115           	Temp2: .Byte 1
000116           	Temp3: .Byte 1
                 
                 
                 ;########################################################## VECTORES DE INTERRUPCION #########################################################
                 
                 .CSEG
                 .ORG 0x00
000000 940c 0035 	jmp INICIO
                 
                 .ORG 0x000A
00000a 940c 00aa 	jmp RTI_SELECT
                 	
                 .ORG 0x001A
00001a 940c 0075 	jmp RTI_TIMER1_OVF
                 
                 .ORG 0x0024
000024 940c 02a6 	jmp USART_RXC
                 
                 .ORG 0x34
000034 9518      	reti
                 
                 ;################################################################################################################################## 
                 ;########################################################## CONFIGURACION #########################################################
                 ;##################################################################################################################################
                 
                 	INICIO:
                 
000035 e008      		ldi r16, high(ramend)  ;conf pila
000036 bf0e      		out sph, r16
000037 ef0f      		ldi r16, low(ramend)
000038 bf0d      		out spl, r16
                 
                 ;########################################################## CONFIGURACION ADC #########################################################
                 
000039 e003      		ldi r16, (1<<ADC1D)|(1<<ADC0D)	;descativo entrada digital de los pines ADC0 y ADC1
00003a 9300 007e 		sts DIDR0, r16
                 
                 ;########################################################## CONFIGURACION  de PINES y PCINT0 #########################################################
                 
00003c e000      		ldi r16, (0<<PD7)|(0<<PD6)|(0<<PD5)				;pines como entrada interrupcion de PCIE2
00003d b90a      		out DDRD,r16
00003e ee00      		ldi r16, (1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)	;Resistencias Pull Up
00003f b90b      		out PORTD, r16
000040 e004      		ldi r16, (1<<PCIE2)								;habilito int por cambio de pines[7:0] (PCIE2)
000041 9300 0068 		sts PCICR, r16
000043 ee00      		ldi r16, 0b1110_0000							;habilito los 3 pines de interrupcion (PCINT 23 - 22 - 21)
000044 9300 006d 		sts PCMSK2, r16
                 
000046 e006      		ldi r16, (1<<PB1)|(1<<PB2)						;como salida PB1(OC1A) y PB2(OC1B) PWM
000047 b904      		out DDRB, r16
                 
000048 e600      		ldi r16, (1<<PD5)|(1<<PD6)						;enciendo led prueba interrupcion externa PCEI0
000049 b90a      		out DDRD, r16
                 
                 ;########################################################## CONFIGURACION DE TIMER/COMP 1 #########################################################
                 		
00004a ea03      		ldi r16, (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(1<<WGM10) ; modo fase correcta PWM, comparacion igual no invertido, resolucion 10-bit
00004b 9300 0080 		sts TCCR1A, r16
00004d e00a      		ldi r16, (1<<WGM12)|(0<<WGM13)|(0<<CS12)|(1<<CS11)|(0<<CS10)  ;selector de reloj de timer/counter: Clock_I-O/8(from prescaler)
00004e 9300 0081 		sts TCCR1B, r16
                 
000050 e001      		ldi r16, (1<<TOIE1)								;interrupcion de salida del temporizador/contador  
000051 9300 006f 		sts TIMSK1, r16
                 		
000053 e000      		ldi r16, 0x00
000054 9300 0089 		sts OCR1AH, r16
000056 9300 0088 		sts OCR1AL, r16
000058 9300 008b 		sts OCR1BH, r16
00005a 9300 008a 		sts OCR1BL, r16
                 
                 ;########################################################## CONFIGURACION DE USART #########################################################
                 
00005c e607      		ldi r16, 103								;Velocidad de transmicion 9600 Bd
00005d e010      		ldi r17, 0
00005e 9310 00c5 		sts UBRR0H, r17
000060 9300 00c4 		sts UBRR0L, r16
                 
000062 e908      		ldi r16, (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)	;Habilita interrupción por recepción, Habilita recepción, Habilita transmición
000063 9300 00c1 		sts UCSR0B, r16
                 			
000065 e006      		ldi r16, (0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)	;Stop Bit 1, 8 bits
000066 9300 00c2 		sts UCSR0C, r16								
                 		
000068 9478      		SEI
                 
                 ;################################################################################################################################## 
                 ;############################################################# PROGRAMA ###########################################################
                 ;##################################################################################################################################
                 
                 ;########################################################## BUCLE PRINCIPAL #########################################################
                 		
                 		BUCLE:
000069 940e 00d8 			call ADC0
00006b 940e 00ee 			call ADC1
00006d 940e 0104 			call CALCULO_TENSION
00006f 940e 0127 			call CALCULO_CORRIENTE
000071 940e 032d 			call USART_COMPARACION
000073 940c 0069 			jmp BUCLE
                 
                 ;########################################################## TRATAMIENTO DE INTERRUPCION DEL TIMER1 (salidas PWM 1-5 V) #########################################################
                 
                 		RTI_TIMER1_OVF:			
000075 92df
000076 b6df
000077 92df
000078 92cf
000079 92ef
00007a 92ff
00007b 930f
00007c 931f
00007d 932f
00007e 933f
00007f 934f
000080 935f
000081 936f
000082 937f
000083 938f
000084 939f
000085 93af
000086 93bf      			PUSH_SREG						;guardo en la pila la posicion de memoria
                 								
000087 9150 0100 			lds r21, VAL_TensionADCH
000089 9350 0089 			sts OCR1AH, r21					;salida PWMA timer OC1A
00008b 9150 0101 			lds r21, VAL_TensionADCL	
00008d 9350 0088 			sts OCR1AL, r21
                 			
00008f 9140 0102 			lds r20, VAL_CorrienteADCH
000091 9340 008b 			sts OCR1BH, r20					;salida PWMB timer OC1B
000093 9140 0103 			lds r20, VAL_CorrienteADCL	
000095 9340 008a 			sts OCR1BL, r20
                 			
000097 91bf
000098 91af
000099 919f
00009a 918f
00009b 917f
00009c 916f
00009d 915f
00009e 914f
00009f 913f
0000a0 912f
0000a1 911f
0000a2 910f
0000a3 90ff
0000a4 90ef
0000a5 90cf
0000a6 90df
0000a7 bedf
0000a8 90df      			POP_SREG					;recupero el valor de la pila
0000a9 9518      			reti
                 
                 ;########################################################## INTERRUPCION POR PCINT0 #########################################################
                 
                 		RTI_SELECT:
0000aa 92df
0000ab b6df
0000ac 92df
0000ad 92cf
0000ae 92ef
0000af 92ff
0000b0 930f
0000b1 931f
0000b2 932f
0000b3 933f
0000b4 934f
0000b5 935f
0000b6 936f
0000b7 937f
0000b8 938f
0000b9 939f
0000ba 93af
0000bb 93bf      			PUSH_SREG
                 
0000bc 994f      			sbic PIND, PIND7				;Pregunta si PD7 esta en 0
0000bd 940e 01d8 			call MOSTRAR_POTENCIA			;Llama funcion para mostrar potencia
0000bf 994e      			sbic PIND, PIND6				;Pregunta si PD6 esta en 0
0000c0 940e 021b 			call MOSTRAR_CORRIENTE			;Llama funcion para mostrar corriente
0000c2 994d      			sbic PIND, PIND5				;Pregunta si PD5 esta en 0
0000c3 940e 0263 			call MOSTRAR_TENSION			;Llama funcion para mostrar tension
                 			
0000c5 91bf
0000c6 91af
0000c7 919f
0000c8 918f
0000c9 917f
0000ca 916f
0000cb 915f
0000cc 914f
0000cd 913f
0000ce 912f
0000cf 911f
0000d0 910f
0000d1 90ff
0000d2 90ef
0000d3 90cf
0000d4 90df
0000d5 bedf
0000d6 90df      			POP_SREG
0000d7 9518      			reti
                 
                 ;########################################################## SUBRUTINA PARA LEER ADC0 ###################################################################
                 	
                 	ADC0:
                 
                 			// *** Configuramos ADMUX ***
0000d8 e400      		ldi r16, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0) 
0000d9 9300 007c 		sts ADMUX, r16  
                 			; Referencia de Voltaje Con AVCC y Capacitor. Activamos ADC, Canal ADC0    
                 
                 		// *** Iniciamos conversión en ADC0 *** 
0000db ee0f      		ldi r16, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) ;prescaler en 8, habilito ADC, int de conversion completa(ADIE), activacion auto del ADC(ADATE)  
0000dc 9300 007a 		sts ADCSRA, r16 
0000de e006      		ldi r16, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	;Timer/Counter1 Overflow
0000df 9300 007b 		sts ADCSRB, r16
                 
                 		adcLeerADC0:
0000e1 9100 007a 		lds r16, ADCSRA  ;Carga el control ADC y rgistro de estado A en el registro 16
0000e3 fd06      		SBRC r16, 6      ;Salta si el bit 6 en el  registro r16 es limpiado
0000e4 cffc      		rjmp adcLeerADC0 
                 			
0000e5 9110 0078 		lds r17, ADCL  ; Cargamos parte baja del ADC pero no la guardamos.
0000e7 9100 0079 		lds r16, ADCH  ; Cargamos parte alta del ADC en el registro 16.
0000e9 9310 0103 		sts VAL_CorrienteADCL, r17 ; Cargamos el valor de ADCH en SRAM (a variable ValPotA)
0000eb 9300 0102 		sts VAL_CorrienteADCH, r16
                 	
0000ed 9508      		ret
                 			
                 ;################################################################### SUBRUTINA PARA LEER ADC1 ###################################################################
                 
                 	ADC1:
                 
                 			// *** Configuramos ADMUX ***
0000ee e421      		ldi r18, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0) 
0000ef 9320 007c 		sts ADMUX, r18  
                 			; Referencia de Voltaje Con AVCC y Capacitor. Activamos ADC, Canal ADC0    
                 
                 		// *** Iniciamos conversión en ADC0 *** 
0000f1 ee2f      		ldi r18, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) ;prescaler en 8, habilito ADC, int de conversion completa(ADIE), activacion auto del ADC(ADATE)  
0000f2 9320 007a 		sts ADCSRA, r18 
0000f4 e026      		ldi r18, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	;Timer/Counter1 Overflow
0000f5 9320 007b 		sts ADCSRB, r18
                 
                 		adcLeerADC1:
0000f7 9120 007a 		lds r18, ADCSRA  ;Carga el control ADC y rgistro de estado A en el registro 16
0000f9 fd26      		SBRC r18, 6      ;Salta si el bit 6 en el  registro r16 es limpiado
0000fa cffc      		rjmp adcLeerADC1 
                 			
0000fb 9120 0078 		lds r18, ADCL  ; Cargamos parte baja del ADC pero no la guardamos.
0000fd 9130 0079 		lds r19, ADCH  ; Cargamos parte alta del ADC en el registro 16.
0000ff 9320 0101 		sts VAL_TensionADCL, r18 ; Cargamos el valor de ADCH en SRAM (a variable ValPotA)
000101 9330 0100 		sts VAL_TensionADCH, r19
                 	
000103 9508      		ret	
                 ;################################################################### CALCULO DE TENSION ###################################################################
                 	
                 	CALCULO_TENSION:
                 		
000104 9170 0100 		lds R23, VAL_TensionADCH
000106 9160 0101 		lds R22, VAL_TensionADCL			;Carga el numero VAL_Tension en r23:r22
000108 e050      		ldi R21,0x00
000109 e148      		ldi R20,0x18						;Carga el numero 24 r21:r20
00010a 940e 01af 		call mul16x16_16					;Llamado a rutina de multiplicacion de 16 bits x 16 bits
00010c 9310 0112 		sts GRANDEH, r17					;Guardamos resultado de la primer multiplicacion
00010e 9300 0113 		sts GRANDEL, r16
                 
000110 9170 0100 		lds R23, VAL_TensionADCH
000112 9160 0101 		lds R22, VAL_TensionADCL			;Carga el numero VAL_Tension en r23:r22
000114 e050      		ldi R21,0x00
000115 e24b      		ldi R20,0x2B						;Carga el numero 43 r21:r20
000116 940e 01af 		call mul16x16_16					;Llamado a rutina de multiplicacion de 16 bits x 16 bits
                 	
000118 e624      		ldi	DivisorL,0x64					;El dividendo ya esta en r16 y r17
000119 e030      		ldi	DivisorH,0x00					;Dividimos por 100
00011a 940e 01c1 		call Division16_16
                 
00011c 9130 0112 		lds r19, GRANDEH
00011e 9120 0113 		lds r18, GRANDEL
                 
000120 0f31      		add r19, DividendoH					;Sumamos primer calculo con segundo calculo
000121 1f20      		adc r18, DividendoL
000122 9330 0104 		sts	TensionH, r19					;Valor de la tension real
000124 9320 0105 		sts	TensionL, r18
000126 9508      		ret
                 
                 ;################################################################### CALCULO DE CORRIENTE ###################################################################
                  
                 	CALCULO_CORRIENTE:
                 
000127 9170 0102 		lds r23, VAL_CorrienteADCH			;Carga valores del ADC
000129 9160 0103 		lds r22, VAL_CorrienteADCL
00012b e081      		ldi r24, 0x01						;Carga complemento de 511 para restar
00012c ef9e      		ldi r25, 0xFE
00012d 0f68      		add r22, r24						;Realiza suma (resta)
00012e 1f79      		adc r23, r25
00012f e070      		ldi r23, 0x00						;Ponemos 0 en la parte alta del resultado
000130 e052      		ldi r21, 0x02						;Carga 587 (factor para adecuar la medicion) para multiplicar
000131 e44b      		ldi r20, 0x4B
000132 940e 01af 		call mul16x16_16					;Llama funcion multiplicacion
                 
000134 e030      		ldi DivisorH, 0x00					;Carga 10 en el divisor (para obtener nuestro factor >> 0.0587)
000135 e02a      		ldi DivisorL, 0x0A
000136 940e 01c1 		call Division16_16					;Llama funcion division
                 
000138 9310 0108 		sts CorrienteH, r17					;Resultado corriente
00013a 9300 0109 		sts CorrienteL, r16				
00013c 9508      		ret
                 
                 ;################################################################### CALCULO DE POTENCIA ###################################################################
                  
                 	CALCULO_POTENCIA:
                 
00013d 9170 0108 		lds r23, CorrienteH					;Cargar valor de corriente
00013f 9160 0109 		lds r22, CorrienteL
000141 9110 0104 		lds DividendoH, TensionH			;Cargar valor de tension
000143 9100 0105 		lds DividendoL, TensionL
000145 e033      		ldi DivisorH, 0x03					;Cargar 1000 en divisor
000146 ee28      		ldi DivisorL, 0xE8
000147 940e 01c1 		call Division16_16					;Llamar funcion division
000149 9310 0112 		sts GRANDEH, r17					;Guardar resultado
00014b 9300 0113 		sts GRANDEL, r16
                 
00014d 2d1f      		mov DividendoH, RestoH				;Cargar resto para dividir
00014e 2d0e      		mov DividendoL, RestoL
00014f e030      		ldi DivisorH, 0x00					;Cargar 100 en divisor
000150 e624      		ldi DivisorL, 0x64
000151 940e 01c1 		call Division16_16					;Llamar funcion division		
000153 9300 0114 		sts Temp1, r16						;Guardar resultado (primer decimal)
                 
000155 2d1f      		mov DividendoH, RestoH				;Cargar resto para dividir
000156 2d0e      		mov DividendoL, RestoL
000157 e030      		ldi DivisorH, 0x00					;Cargar 10 en divisor
000158 e02a      		ldi DivisorL, 0x0A
000159 940e 01c1 		call Division16_16					;Llamar funcion division
00015b 9300 0115 		sts Temp2, r16						;Guardar resultado (segundo decimal)
00015d 92e0 0116 		sts Temp3, RestoL					;Guardar resto (tercer decimal)
                 
00015f 9150 0112 		lds r21, GRANDEH
000161 9140 0113 		lds r20, GRANDEL
000163 940e 01af 		call mul16x16_16					;Llamar funcion multiplicacion
000165 9310 0106 		sts PotenciaH, r17					;Guardar resultado temporal de la potencia
000167 9300 0107 		sts PotenciaL, r16
                 
000169 9170 0108 		lds r23, CorrienteH					;Cargar valor de corriente
00016b 9160 0109 		lds r22, CorrienteL
00016d e050      		ldi r21, 0x00						;Cargar valor del primer decimal
00016e 9140 0114 		lds r20, Temp1
000170 940e 01af 		call mul16x16_16					;Llamar funcion multiplicacion
000172 e030      		ldi DivisorH, 0x00					;Cargar 10 en divisor para acomodar numero
000173 e02a      		ldi DivisorL, 0x0A
000174 940e 01c1 		call Division16_16					;Llamar funcion division		
000176 9130 0106 		lds r19, PotenciaH					;Cargar valor temporal de potencia
000178 9120 0107 		lds r18, PotenciaL
00017a 0f13      		add r17, r19						;Sumar potencia con resultado de corriente por primer decimal
00017b 1f02      		adc r16, r18
00017c 9310 0106 		sts PotenciaH, r17					;Guardar resultado temporal de la potencia
00017e 9300 0107 		sts PotenciaL, r16
                 
000180 9170 0108 		lds r23, CorrienteH					;Cargar valor de corriente
000182 9160 0109 		lds r22, CorrienteL
000184 e050      		ldi r21, 0x00						;Cargar valor del segundo decimal
000185 9140 0115 		lds r20, Temp2
000187 940e 01af 		call mul16x16_16					;Llamar funcion multiplicacion
000189 e030      		ldi DivisorH, 0x00					;Cargar 100 en divisor para acomodar numero
00018a e624      		ldi DivisorL, 0x64
00018b 940e 01c1 		call Division16_16					;Llamar funcion division		
00018d 9130 0106 		lds r19, PotenciaH					;Cargar valor temporal de potencia
00018f 9120 0107 		lds r18, PotenciaL
000191 0f13      		add r17, r19						;Sumar potencia con resultado de corriente por primer decimal
000192 1f02      		adc r16, r18
000193 9310 0106 		sts PotenciaH, r17					;Guardar resultado temporal de la potencia
000195 9300 0107 		sts PotenciaL, r16
                 
000197 9170 0108 		lds r23, CorrienteH					;Cargar valor de corriente
000199 9160 0109 		lds r22, CorrienteL
00019b e050      		ldi r21, 0x00						;Cargar valor del segundo decimal
00019c 9140 0116 		lds r20, Temp3
00019e 940e 01af 		call mul16x16_16					;Llamar funcion multiplicacion
0001a0 e033      		ldi DivisorH, 0x03					;Cargar 1000 en divisor para acomodar numero
0001a1 ee28      		ldi DivisorL, 0xE8
0001a2 940e 01c1 		call Division16_16					;Llamar funcion division		
0001a4 9130 0106 		lds r19, PotenciaH					;Cargar valor temporal de potencia
0001a6 9120 0107 		lds r18, PotenciaL
0001a8 0f13      		add r17, r19						;Sumar potencia con resultado de corriente por primer decimal
0001a9 1f02      		adc r16, r18
0001aa 9310 0106 		sts PotenciaH, r17					;Guardar resultado temporal de la potencia
0001ac 9300 0107 		sts PotenciaL, r16
                 
0001ae 9508      		ret
                 		
                 ;################################################################### FUNCION DE MULTIPLICACION ###################################################################
                 
                 	mul16x16_16:
                 
0001af 9f64      		mul	r22, r20				; al * bl
0001b0 0180      		movw	r17:r16, r1:r0
0001b1 9f74      		mul	r23, r20				; ah * bl
0001b2 0d10      		add	r17, r0
0001b3 9f56      		mul	r21, r22				; bh * al
0001b4 0d10      		add	r17, r0
                 		;resultado r17, r16
0001b5 9508      		ret
                 
                 ;############################################################ FUNCION DE MULTIPLICACION DEL RESTO ###################################################################
                 
                 	mul16x16_24:
0001b6 9f75      		mul		r23, r21		; ah * bh
0001b7 2d20      		mov		r18, r0
0001b8 9f64      		mul		r22, r20		; al * bl
0001b9 0180      		movw	r17:r16, r1:r0
0001ba 9f74      		mul		r23, r20		; ah * bl
0001bb 0d10      		add		r17, r0
0001bc 1d21      		adc		r18, r1
0001bd 9f56      		mul		r21, r22		; bh * al
0001be 0d10      		add		r17, r0
0001bf 1d21      		adc		r18, r1
                 		; resultado r18, r17, r16
0001c0 9508      		ret
                 
                 
                 ;################################################################### FUNCION DE DIVISION ###################################################################
                 
                 	Division16_16:	
0001c1 24ee      		clr	RestoL					; borra byte low de Resto
0001c2 18ff      		sub	RestoH,RestoH			; borra el byte alto y acarreo
0001c3 e141      		ldi	Contador,17				; contador de bucle infinito
                 		div_1:	
0001c4 1f00      		rol	DividendoL				; desplazo a la izquierda el dividendo
0001c5 1f11      		rol	DividendoH
0001c6 954a      		dec	Contador				; decremento contador
0001c7 f429      		brne	div_2				;if done
0001c8 92e0 010a 		sts RestodivL, RestoL
0001ca 92f0 010b 		sts RestodivH, RestoH
0001cc 9508      		ret							; salida
                 		div_2:	
0001cd 1cee      		rol	RestoL					;desplazo a la izquerda el resto
0001ce 1cff      		rol	RestoH
0001cf 1ae2      		sub	RestoL,DivisorL			;resto = resto - divisor
0001d0 0af3      		sbc	RestoH,DivisorH	
0001d1 f420      		brcc	div_3				;si el resultado es negativo
0001d2 0ee2      		add	RestoL,DivisorL			; restaurar el resto
0001d3 1ef3      		adc	RestoH,DivisorH
0001d4 9488      		clc							;limpia el acarreo para ser deplazado al resultado
0001d5 cfee      		rjmp	div_1				;else
                 		div_3:	
0001d6 9408      		sec							;pone a 1 la bandera de acarreo para ser trasladado al resultado
0001d7 cfec      		rjmp	div_1
                 		; resultado de la division r17, r16
                 		; resto de la division r15, r14
                 
                 ;########################################################## MOSTRAR POTENCIA #########################################################
                 
                 	MOSTRAR_POTENCIA:
                 		
0001d8 90d0 0106 		lds ENTEROH, PotenciaH		;Cargar valor de potencia alta
0001da 90c0 0107 		lds ENTEROL, PotenciaL		;Cargar valor de potencia baja
                 		
0001dc 940e 02d4 		call DESCOMPOSICION
                 				
0001de 940e 02cf 		call USART_ESPERA			
0001e0 e540      		ldi r20, 0x50				; P
0001e1 9340 00c6 		sts UDR0, r20
                 
0001e3 940e 02cf 		call USART_ESPERA
0001e5 e240      		ldi r20, 0x20				; (espacio)
0001e6 9340 00c6 		sts UDR0, r20
                 
0001e8 940e 02cf 		call USART_ESPERA			
0001ea e34d      		ldi r20, 0x3D				; =
0001eb 9340 00c6 		sts UDR0, r20
                 
0001ed 940e 02cf 		call USART_ESPERA
0001ef e240      		ldi r20, 0x20				; (espacio)
0001f0 9340 00c6 		sts UDR0, r20
                 
0001f2 940e 02f9 		call MOSTRAR
                 
0001f4 940e 02cf 		call USART_ESPERA
0001f6 e240      		ldi r20, 0x20				; (espacio)
0001f7 9340 00c6 		sts UDR0, r20
                 
0001f9 940e 02cf 		call USART_ESPERA			
0001fb e547      		ldi r20, 0x57				; W
0001fc 9340 00c6 		sts UDR0, r20
                 
0001fe 940e 02cf 		call USART_ESPERA			
000200 e641      		ldi r20, 0x61				; a
000201 9340 00c6 		sts UDR0, r20
                 
000203 940e 02cf 		call USART_ESPERA			
000205 e744      		ldi r20, 0x74				; t
000206 9340 00c6 		sts UDR0, r20
                 
000208 940e 02cf 		call USART_ESPERA			
00020a e744      		ldi r20, 0x74				; t
00020b 9340 00c6 		sts UDR0, r20
                 
00020d 940e 02cf 		call USART_ESPERA			
00020f e04a      		ldi r20, 0x0A				; (salto de linea)
000210 9340 00c6 		sts UDR0, r20
                 
000212 940e 02cf 		call USART_ESPERA			
000214 e04d      		ldi r20, 0x0D				; (retorno de carro)
000215 9340 00c6 		sts UDR0, r20
                 
000217 2711      		clr r17						;Limpiar registro de dato recibido
000218 9310 0111 		sts DATO_RX, r17
                 	
00021a 9508      		ret
                 
                 ;######################################################### MOSTRAR CORRIENTE #########################################################
                 
                 	MOSTRAR_CORRIENTE:
                 		
00021b 90d0 0108 		lds ENTEROH, CorrienteH		;Cargar valor de corriente alta
00021d 90c0 0109 		lds ENTEROL, CorrienteL		;Cargar valor de corriente baja
                 		
00021f 940e 02d4 		call DESCOMPOSICION
                 				
000221 940e 02cf 		call USART_ESPERA			
000223 e449      		ldi r20, 0x49				; I
000224 9340 00c6 		sts UDR0, r20
                 
000226 940e 02cf 		call USART_ESPERA
000228 e240      		ldi r20, 0x20				; (espacio)
000229 9340 00c6 		sts UDR0, r20
                 
00022b 940e 02cf 		call USART_ESPERA			
00022d e34d      		ldi r20, 0x3D				; =
00022e 9340 00c6 		sts UDR0, r20
                 
000230 940e 02cf 		call USART_ESPERA
000232 e240      		ldi r20, 0x20				; (espacio)
000233 9340 00c6 		sts UDR0, r20
                 
000235 940e 02f9 		call MOSTRAR
                 
000237 940e 02cf 		call USART_ESPERA
000239 e240      		ldi r20, 0x20				; (espacio)
00023a 9340 00c6 		sts UDR0, r20
                 
00023c 940e 02cf 		call USART_ESPERA			
00023e e441      		ldi r20, 0x41				; A
00023f 9340 00c6 		sts UDR0, r20
                 
000241 940e 02cf 		call USART_ESPERA			
000243 e64d      		ldi r20, 0x6D				; m
000244 9340 00c6 		sts UDR0, r20
                 
000246 940e 02cf 		call USART_ESPERA			
000248 e740      		ldi r20, 0x70				; p
000249 9340 00c6 		sts UDR0, r20
                 
00024b 940e 02cf 		call USART_ESPERA			
00024d e645      		ldi r20, 0x65				; e
00024e 9340 00c6 		sts UDR0, r20
                 		
000250 940e 02cf 		call USART_ESPERA			
000252 e742      		ldi r20, 0x72				; r
000253 9340 00c6 		sts UDR0, r20
                 
000255 940e 02cf 		call USART_ESPERA			
000257 e04a      		ldi r20, 0x0A				; (salto de linea)
000258 9340 00c6 		sts UDR0, r20
                 
00025a 940e 02cf 		call USART_ESPERA			
00025c e04d      		ldi r20, 0x0D				; (retorno de carro)
00025d 9340 00c6 		sts UDR0, r20
                 
00025f 2711      		clr r17						;Limpiar registro de dato recibido
000260 9310 0111 		sts DATO_RX, r17
                 	
000262 9508      		ret
                 
                 ;########################################################## MOSTRAR TENSION #########################################################
                 
                 	MOSTRAR_TENSION:
                 
000263 90d0 0104 		lds ENTEROH, TensionH		;Cargar valor de tension alta
000265 90c0 0105 		lds ENTEROL, TensionL		;Cargar valor de tension baja
                 		
000267 940e 02d4 		call DESCOMPOSICION
                 				
000269 940e 02cf 		call USART_ESPERA			
00026b e546      		ldi r20, 0x56				; V
00026c 9340 00c6 		sts UDR0, r20
                 
00026e 940e 02cf 		call USART_ESPERA
000270 e240      		ldi r20, 0x20				; (espacio)
000271 9340 00c6 		sts UDR0, r20
                 
000273 940e 02cf 		call USART_ESPERA			
000275 e34d      		ldi r20, 0x3D				; =
000276 9340 00c6 		sts UDR0, r20
                 
000278 940e 02cf 		call USART_ESPERA
00027a e240      		ldi r20, 0x20				; (espacio)
00027b 9340 00c6 		sts UDR0, r20
                 
00027d 940e 02f9 		call MOSTRAR
                 
00027f 940e 02cf 		call USART_ESPERA
000281 e240      		ldi r20, 0x20				; (espacio)
000282 9340 00c6 		sts UDR0, r20
                 
000284 940e 02cf 		call USART_ESPERA			
000286 e546      		ldi r20, 0x56				; V
000287 9340 00c6 		sts UDR0, r20
                 
000289 940e 02cf 		call USART_ESPERA			
00028b e64f      		ldi r20, 0x6F				; o
00028c 9340 00c6 		sts UDR0, r20
                 
00028e 940e 02cf 		call USART_ESPERA			
000290 e64c      		ldi r20, 0x6C				; l
000291 9340 00c6 		sts UDR0, r20
                 
000293 940e 02cf 		call USART_ESPERA			
000295 e744      		ldi r20, 0x74				; t
000296 9340 00c6 		sts UDR0, r20
                 		
000298 940e 02cf 		call USART_ESPERA			
00029a e04a      		ldi r20, 0x0A				; (salto de linea)
00029b 9340 00c6 		sts UDR0, r20
                 
00029d 940e 02cf 		call USART_ESPERA			
00029f e04d      		ldi r20, 0x0D				; (retorno de carro)
0002a0 9340 00c6 		sts UDR0, r20
                 
0002a2 2711      		clr r17						;Limpiar registro de dato recibido
0002a3 9310 0111 		sts DATO_RX, r17
0002a5 9508      		ret
                 
                 ;########################################################## USART RECEPCION #########################################################
                 
                 	USART_RXC:
                 
0002a6 92df
0002a7 b6df
0002a8 92df
0002a9 92cf
0002aa 92ef
0002ab 92ff
0002ac 930f
0002ad 931f
0002ae 932f
0002af 933f
0002b0 934f
0002b1 935f
0002b2 936f
0002b3 937f
0002b4 938f
0002b5 939f
0002b6 93af
0002b7 93bf      		PUSH_SREG
0002b8 9100 00c6 		lds r16, UDR0
0002ba 9300 0111 		sts DATO_RX, r16
0002bc 91bf
0002bd 91af
0002be 919f
0002bf 918f
0002c0 917f
0002c1 916f
0002c2 915f
0002c3 914f
0002c4 913f
0002c5 912f
0002c6 911f
0002c7 910f
0002c8 90ff
0002c9 90ef
0002ca 90cf
0002cb 90df
0002cc bedf
0002cd 90df      		POP_SREG
0002ce 9518      		reti
                 
                 ;########################################################## USART ESPERA #########################################################
                 
                 	USART_ESPERA:
                 
0002cf 91a0 00c0 		lds r26, UCSR0A				;Espera que se limpie la bandera de transmicion
0002d1 ffa5      		sbrs r26, UDRE0
0002d2 cffc      		rjmp USART_ESPERA
0002d3 9508      		ret
                 
                 ;########################################################## DESCOMPOSICION ENTERO #########################################################
                 		
                 	DESCOMPOSICION:
                 
0002d4 e0ec      		ldi	ZL, LOW(VECTOR)
0002d5 e0f1      		ldi	ZH, HIGH(VECTOR)			
0002d6 e277      		ldi rmp, 0x27				;Cargamos 10000
0002d7 2f67      		mov rBin2H,rmp
0002d8 e170      		ldi rmp, 0x10
0002d9 2f57      		mov rBin2L,rmp
0002da d012      		rcall Bin2ToDigit			;Funcion para calcular digito
0002db e073      		ldi rmp, 0x03				;Cargamos 1000
0002dc 2f67      		mov rBin2H,rmp
0002dd ee78      		ldi rmp, 0xE8
0002de 2f57      		mov rBin2L,rmp
0002df d00d      		rcall Bin2ToDigit			;Funcion para calcular digito
0002e0 e070      		ldi rmp, 0x00				;Cargamos 100
0002e1 2f67      		mov rBin2H,rmp
0002e2 e674      		ldi rmp, 0x64
0002e3 2f57      		mov rBin2L,rmp
0002e4 d008      		rcall Bin2ToDigit			;Funcion para calcular digito
0002e5 e070      		ldi rmp, 0x00				;Cargamos 10
0002e6 2f67      		mov rBin2H,rmp
0002e7 e07a      		ldi rmp, 0x0A
0002e8 2f57      		mov rBin2L,rmp
0002e9 d003      		rcall Bin2ToDigit			;Funcion para calcular digito
0002ea 82c0      		st z,ENTEROL
0002eb 9734      		sbiw ZL,4					;Poner el puntero en el primer BCD
0002ec 9508      		ret
                 
                 	Bin2ToDigit:
0002ed 2777      		clr rmp						;Conteo en cero
                 
                 	Bin2ToDigita:
0002ee 16d6      		cp ENTEROH,rBin2H			; Comparo nro con comparacion parte alta
0002ef f038      		brcs Bin2ToDigitc			; Si Carry=1 el nro es menor a comparacion, vuelve a rutina para comparar con un valor menor
0002f0 f411      		brne Bin2ToDigitb	 
0002f1 16c5      		cp ENTEROL,rBin2L			; Si es igual, Comparo nro con comparacion parte baja
0002f2 f020      		brcs Bin2ToDigitc			; Si Carry=1 nro menor a comparacion
                 
                 	Bin2ToDigitb:			
0002f3 1ac5      		sub ENTEROL,rBin2L			; Resto partes bajas
0002f4 0ad6      		sbc ENTEROH,rBin2H			; Resto partes altas con carry
0002f5 9573      		inc rmp						; Incremento cuenta para digito BCD
0002f6 cff7      		rjmp Bin2ToDigita			; Repito el proceso hasta que sea menor a comparacion
                 
                 	Bin2ToDigitc:
0002f7 9371      		st z+,rmp					; Salva el digito 
0002f8 9508      		ret
                 
                 ;########################################################## MOSTRAR ENTERO #########################################################
                 	
                 	MOSTRAR:
                 		
0002f9 940e 02cf 		call USART_ESPERA
0002fb 91b1      		ld	r27, Z+					;Cargamos decena
0002fc e3d0      		ldi r29, 48
0002fd 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0002fe 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000300 940e 02cf 		call USART_ESPERA
                 	
000302 940e 02cf 		call USART_ESPERA
000304 91b1      		ld	r27, Z+					;Cargamos unidad
000305 e3d0      		ldi r29, 48
000306 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000307 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000309 940e 02cf 		call USART_ESPERA
                 
00030b 940e 02cf 		call USART_ESPERA			
00030d e24c      		ldi r20, 0x2C				; ,
00030e 9340 00c6 		sts UDR0, r20				;Enviamos por puerto serie
                 
000310 940e 02cf 		call USART_ESPERA
000312 91b1      		ld	r27, Z+					;Cargamos primer decimal
000313 e3d0      		ldi r29, 48
000314 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000315 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000317 940e 02cf 		call USART_ESPERA
                 
000319 940e 02cf 		call USART_ESPERA
00031b 91b1      		ld	r27, Z+					;Cargamos segundo decimal
00031c e3d0      		ldi r29, 48
00031d 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00031e 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000320 940e 02cf 		call USART_ESPERA
                 	
000322 940e 02cf 		call USART_ESPERA
000324 81b0      		ld	r27, Z					;Cargamos tercer decimal
000325 e3d0      		ldi r29, 48
000326 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000327 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000329 940e 02cf 		call USART_ESPERA
                 
00032b 9734      		SBIW ZL, 4					;Poner el puntero en el primer BCD
00032c 9508      		ret
                 		
                 ;########################################################## USART COMPARACION #########################################################
                 
                 	USART_COMPARACION:
                 		
00032d 9100 0111 		lds r16, DATO_RX			;Cargar dato recibido
00032f e516      		ldi r17, 0x56				;Comparar con V
000330 1301      		cpse r16, r17
000331 c002      		rjmp I						;Si es falso, compara con I
000332 940e 0263 		call MOSTRAR_TENSION		
                 		I:
000334 e419      		ldi r17, 0x49				;Comparar con I
000335 1301      		cpse r16, r17
000336 c002      		rjmp P						;Si es falso, compara con P
000337 940e 021b 		call MOSTRAR_CORRIENTE
                 		P:
000339 e510      		ldi r17, 0x50				;Comparar con P
00033a 1301      		cpse r16, r17
00033b 9508      		ret
00033c 940e 01d8 		call MOSTRAR_POTENCIA
00033e 9508      		ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
r0 :   7 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  12 r13:  23 r14:  14 r15:  14 
r16:  76 r17:  43 r18:  38 r19:  27 r20:  93 r21:  26 r22:  24 r23:  37 
r24:   8 r25:   8 r26:   8 r27:  21 r28:   0 r29:  10 r30:   3 r31:   1 
x  :   0 y  :   0 z  :   7 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   8 add   :  15 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   2 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  77 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :   0 cpse  :   3 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   1 jmp   :   5 
ld    :   5 ldd   :   0 ldi   : 105 lds   :  48 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  13 movw  :   2 mul   :   7 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   9 pop   :  51 
push  :  51 rcall :   4 ret   :  17 reti  :   4 rjmp  :   8 rol   :   4 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  93 
sub   :   3 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00067e   1574      0   1574   32768   4.8%
[.dseg] 0x000100 0x000117      0     23     23    2048   1.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
