
AVRASM ver. 2.1.57  C:\Users\crist\Desktop\Kituu\Uader\2 Año - 2 Cuatrimestre\Sistemas Digitales IV\Trabajo Final\SDIV-ASMBL\Medidor de U  I.asm Sat Sep 26 11:56:27 2020

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m328Pdef.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328PDEF_INC_
                 #define _M328PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328P
                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * MULTIMEDIDOR DE CC
                  *
                  * 
                  *   Autores: Correa Bruno, De Battista Cristian, Errecart Matias
                  *	 
                  */ 
                  ;########################################################################################################################################## 
                  ;############################################################### DECLARACION ##############################################################
                  ;##########################################################################################################################################
                 
                 .def	ENTEROL=r12					;Subrutina mostrar
                 .def	ENTEROH=r13					;Subrutina mostrar
                 .def	RestoL=r14					;Subrutina division
                 .def	RestoH=r15					;Subrutina division
                 .def	DividendoL=r16				;Subrutina division
                 .def	DividendoH=r17				;Subrutina division
                 .def	DivisorL=r18				;Subrutina division
                 .def	DivisorH=r19				;Subrutina division
                 .def	Contador=r20				;Subrutina division
                 .def	rBin2L=r21					;Subrutina descomposicion
                 .def	rBin2H=r22					;Subrutina descomposicion
                 .def	rmp=r23						;Subrutina descomposicion
                 
                 .MACRO	PUSH_SREG					;Guardar en la pila la posicion de memoria
                 		push r12
                 		in r12, SREG			
                 		push r12					;Guardar registros de trabajo
                 		push r13
                 		push r14
                 		push r15
                 		push r16
                 		push r17
                 		push r18
                 		push r19
                 		push r20
                 		push r21
                 		push r22
                 		push r23
                 		push r24
                 		push r25
                 		push r26
                 		push r27
                 .ENDMACRO
                 
                 .MACRO	POP_SREG
                 		pop r27
                 		pop r26
                 		pop r25
                 		pop r24
                 		pop r23
                 		pop r22
                 		pop r21
                 		pop r20
                 		pop r19
                 		pop r18
                 		pop r17
                 		pop r16
                 		pop r15
                 		pop r14
                 		pop r13
                 		pop r12
                 		out sreg, r12				;Recuperar de la pila la posicion de memoria
                 		pop r12
                 .ENDMACRO
                 
                 .DSEG
                 .ORG 0x100
000100           	VAL_TensionADCH: .Byte 1
000101           	VAL_TensionADCL: .Byte 1
000102           	VAL_CorrienteADCH: .Byte 1
000103           	VAL_CorrienteADCL: .Byte 1
000104           	TensionH: .Byte 1
000105           	TensionL: .Byte 1
000106           	PotenciaH: .Byte 1
000107           	PotenciaL: .Byte 1
000108           	CorrienteH: .Byte 1
000109           	CorrienteL: .Byte 1
00010a           	RestodivL: .Byte 1
00010b           	RestodivH: .Byte 1
00010c           	VECTOR: .Byte 5
000111           	DATO_RX: .Byte 1
000112           	GRANDEH: .Byte 1
000113           	GRANDEL: .Byte 1
000114           	Temp1: .Byte 1
000115           	Temp2: .Byte 1
000116           	Temp3: .Byte 1
000117           	CorrienteH_PWM: .Byte 1
000118           	CorrienteL_PWM: .Byte 1
000119           	PotenciaH_PWM: .Byte 1
00011a           	PotenciaL_PWM: .Byte 1
                 	
                 ;########################################################## VECTORES DE INTERRUPCION #########################################################
                 
                 .CSEG
                 .ORG 0x00
000000 940c 0035 	jmp INICIO
                 
                 .ORG 0x000A
00000a 940c 0165 	jmp RTI_SELECT
                 	
                 .ORG 0x001A
00001a 940c 007d 	jmp RTI_TIMER1_OVF
                 
                 .ORG 0x0024
000024 940c 0413 	jmp USART_RXC
                 
                 .ORG 0x34
000034 9518      	reti
                 
                 ;################################################################################################################################## 
                 ;########################################################## CONFIGURACION #########################################################
                 ;##################################################################################################################################
                 
                 	INICIO:
                 
000035 e008      		ldi r16, high(ramend)		;Configuracion de pila
000036 bf0e      		out sph, r16
000037 ef0f      		ldi r16, low(ramend)
000038 bf0d      		out spl, r16
                 
                 ;########################################################## CONFIGURACION ADC #########################################################
                 
000039 e003      		ldi r16, (1<<ADC1D)|(1<<ADC0D)	
00003a 9300 007e 		sts DIDR0, r16				;Descativo entrada digital de los pines ADC0 y ADC1
                 
                 ;########################################################## CONFIGURACION  de PINES y PCINT0 #########################################################
                 
00003c e000      		ldi r16, (0<<DDD7)|(0<<DDD6)|(0<<DDD5)			
00003d b90a      		out DDRD,r16				;Pines como entrada interrupcion de PCIE2
00003e ee00      		ldi r16, (1<<PD7)|(1<<PD6)|(1<<PD5)				
00003f b90b      		out PORTD, r16				;Resistencias Pull Up
000040 e004      		ldi r16, (1<<PCIE2)			;Habilito int por cambio de pines[7:0] (PCIE2)
000041 9300 0068 		sts PCICR, r16
000043 ee00      		ldi r16, 0b1110_0000		;Habilito los pines 7-6-5 de interrupcion (PCINT 23 - 22 - 21)
000044 9300 006d 		sts PCMSK2, r16
000046 e20e      		ldi r16, (1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB5)	
000047 b904      		out DDRB, r16				;Como salida PB1-9(OC1A), PB2-10(OC1B)|| PB5-13(CSK), PB3-11(MOSI)
000048 e200      		ldi r16, (1<<DDC5)			;Pin PC5-A5 (Load) como salida
000049 b907      		out DDRC, r16
                 
                 ;########################################################## CONFIGURACION DE TIMER/COMP 1 #########################################################
                 		
00004a ea03      		ldi r16, (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(1<<WGM10) 
00004b 9300 0080 		sts TCCR1A, r16				;Modo fase correcta PWM, comparacion igual no invertido, resolucion 10-bit
00004d e00a      		ldi r16, (1<<WGM12)|(0<<WGM13)|(0<<CS12)|(1<<CS11)|(0<<CS10)  
00004e 9300 0081 		sts TCCR1B, r16				;Selector de reloj de timer/counter: Clock_I-O/8(from prescaler)
                 
000050 e001      		ldi r16, (1<<TOIE1)			;Interrupcion de salida del temporizador/contador  
000051 9300 006f 		sts TIMSK1, r16
                 		
000053 e000      		ldi r16, 0x00
000054 9300 0089 		sts OCR1AH, r16
000056 9300 0088 		sts OCR1AL, r16
000058 9300 008b 		sts OCR1BH, r16
00005a 9300 008a 		sts OCR1BL, r16
                 
                 ;########################################################## CONFIGURACION DE USART #########################################################
                 
00005c e607      		ldi r16, 103				;Velocidad de transmicion 9600 Bd
00005d e010      		ldi r17, 0
00005e 9310 00c5 		sts UBRR0H, r17
000060 9300 00c4 		sts UBRR0L, r16
                 
000062 e908      		ldi r16, (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)	
000063 9300 00c1 		sts UCSR0B, r16				;Habilita interrupción por recepción, Habilita recepción, Habilita transmición
                 			
000065 e006      		ldi r16, (0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)	
000066 9300 00c2 		sts UCSR0C, r16				;Stop Bit 1, 8 bits				
                 
                 ;########################################################## CONFIGURACION DEL MAX #########################################################
                 
000068 940e 00b2 		call CONFIG_MAX				;Inicializar MAX
                 
00006a 9478      		sei							;Habilitacion global de interrupciones				
                 
                 ;################################################################################################################################## 
                 ;############################################################# PROGRAMA ###########################################################
                 ;##################################################################################################################################
                 
                 ;########################################################## BUCLE PRINCIPAL #########################################################
                 		
                 	BUCLE:
00006b 940e 0194 		call ADC0
00006d 940e 01aa 		call ADC1
00006f 940e 01c0 		call CALCULO_TENSION
000071 940e 01f9 		call CALCULO_CORRIENTE
000073 940e 0220 		call CALCULO_POTENCIA
000075 940e 0292 		call CALCULO_CORRIENTE_PWM
000077 940e 02d3 		call CALCULO_POTENCIA_PWM
000079 940e 049a 		call USART_COMPARACION
00007b 940c 006b 		jmp BUCLE
                 
                 ;########################################################## TRATAMIENTO DE INTERRUPCION DEL TIMER1 (salidas PWM 1-5 V) #########################################################
                 
                 	RTI_TIMER1_OVF:			
00007d 92cf
00007e b6cf
00007f 92cf
000080 92df
000081 92ef
000082 92ff
000083 930f
000084 931f
000085 932f
000086 933f
000087 934f
000088 935f
000089 936f
00008a 937f
00008b 938f
00008c 939f
00008d 93af
00008e 93bf      		PUSH_SREG					;Guardo en la pila la posicion de memoria
                 								
00008f 9150 0119 		lds r21, PotenciaH_PWM
000091 9350 0089 		sts OCR1AH, r21				;Salida PWMA timer OC1A
000093 9150 011a 		lds r21, PotenciaL_PWM	
000095 9350 0088 		sts OCR1AL, r21
                 			
000097 9140 0117 		lds r20, CorrienteH_PWM
000099 9340 008b 		sts OCR1BH, r20				;Salida PWMB timer OC1B
00009b 9140 0118 		lds r20, CorrienteL_PWM	
00009d 9340 008a 		sts OCR1BL, r20
                 			
00009f 91bf
0000a0 91af
0000a1 919f
0000a2 918f
0000a3 917f
0000a4 916f
0000a5 915f
0000a6 914f
0000a7 913f
0000a8 912f
0000a9 911f
0000aa 910f
0000ab 90ff
0000ac 90ef
0000ad 90df
0000ae 90cf
0000af becf
0000b0 90cf      		POP_SREG					;Recupero el valor de la pila
0000b1 9518      		reti
                 
                 ;########################################################## CONFIGURACION SPI Modo - MAESTRO ######################################################### 
                 
                 	CONFIG_MAX:
                 
0000b2 e511      		ldi r17,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	
0000b3 bd1c      		out SPCR,r17				;Habilitar SPI como Master, Velocidad de reloj f/16 (1Mhz)
                 			
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETEAR BRILLO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 					
0000b4 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000b5 b918      		out PORTC, r17
0000b6 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000b7 e01a      		ldi r17, 0x0A
0000b8 bd1e      		out SPDR, r17				;Entrar Set Brillo MAX
0000b9 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000bb 0000      		nop
0000bc e010      		ldi r17, 0x00
0000bd bd1e      		out SPDR,r17				;Setear el brillo MAX al Minimo
0000be 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000c0 0000      		nop
0000c1 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000c2 b918      		out PORTC, r17
0000c3 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETEAR MODOS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000c4 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000c5 b918      		out PORTC, r17
0000c6 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000c7 e019      		ldi r17, 0x09
0000c8 bd1e      		out SPDR, r17				;Entrar en modo de codificacion
0000c9 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000cb 0000      		nop
0000cc e01f      		ldi r17, 0x0F
0000cd bd1e      		out SPDR,r17				;Setear Code B decode for digits 30 No decode for digits 74
0000ce 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000d0 0000      		nop
0000d1 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000d2 b918      		out PORTC, r17
0000d3 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SCAN LIMIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000d4 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000d5 b918      		out PORTC, r17
0000d6 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000d7 e01b      		ldi r17, 0x0B
0000d8 bd1e      		out SPDR, r17				;Entrar Scan Limit
0000d9 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000db 0000      		nop
0000dc e015      		ldi r17, 0x05
0000dd bd1e      		out SPDR,r17				;Display digits 0 1 2 3 4 5
0000de 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000e0 0000      		nop
0000e1 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000e2 b918      		out PORTC, r17
0000e3 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Setear Modo ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000e4 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000e5 b918      		out PORTC, r17
0000e6 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000e7 e01c      		ldi r17, 0x0C
0000e8 bd1e      		out SPDR, r17				;Entrar MODO
0000e9 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000eb 0000      		nop
0000ec e011      		ldi r17, 1
0000ed bd1e      		out SPDR,r17				;Normal Operation
0000ee 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000f0 0000      		nop
0000f1 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000f2 b918      		out PORTC, r17
0000f3 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Setear TEST ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000f4 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000f5 b918      		out PORTC, r17
0000f6 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000f7 e01f      		ldi r17, 0x0F
0000f8 bd1e      		out SPDR, r17				;Entrar TEST
0000f9 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0000fb 0000      		nop
0000fc e010      		ldi r17, 0
0000fd bd1e      		out SPDR,r17				;Normal Operation
0000fe 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000100 0000      		nop
000101 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000102 b918      		out PORTC, r17
000103 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar digitos en "HELLO" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000104 e010      		ldi r17, (0<<PC5)			;Mando 0 a PB4 para indicarle a MAX que inicia transferencia de datos
000105 b918      		out PORTC, r17
000106 0000      		nop							;Cumplir tcss de hoja de datos MAX
000107 e011      		ldi r17, 0x01
000108 bd1e      		out SPDR, r17				;Digito 0
000109 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00010b 0000      		nop
00010c e010      		ldi r17, 0x00
00010d bd1e      		out SPDR,r17				;O
00010e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000110 0000      		nop
000111 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000112 b918      		out PORTC, r17
000113 0000      		nop
                 
000114 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000115 b918      		out PORTC, r17
000116 0000      		nop							;Cumplir tcss de hoja de datos MAX
000117 e012      		ldi r17, 0x02
000118 bd1e      		out SPDR, r17				;Digito 1
000119 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00011b 0000      		nop
00011c e01d      		ldi r17, 0x0D
00011d bd1e      		out SPDR,r17				;L
00011e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000120 0000      		nop
000121 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000122 b918      		out PORTC, r17
000123 0000      		nop
                 
000124 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000125 b918      		out PORTC, r17
000126 0000      		nop							;Cumplir tcss de hoja de datos MAX
000127 e013      		ldi r17, 0x03
000128 bd1e      		out SPDR, r17				;Digito 2
000129 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00012b 0000      		nop
00012c e01d      		ldi r17, 0x0D
00012d bd1e      		out SPDR,r17				;L
00012e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000130 0000      		nop
000131 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000132 b918      		out PORTC, r17
000133 0000      		nop
                 
000134 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000135 b918      		out PORTC, r17
000136 0000      		nop							;Cumplir tcss de hoja de datos MAX
000137 e014      		ldi r17, 0x04
000138 bd1e      		out SPDR, r17				;Digito 3
000139 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00013b 0000      		nop
00013c e01b      		ldi r17, 0x0B
00013d bd1e      		out SPDR,r17				;E
00013e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000140 0000      		nop
000141 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000142 b918      		out PORTC, r17
000143 0000      		nop
                 
000144 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000145 b918      		out PORTC, r17
000146 0000      		nop							;Cumplir tcss de hoja de datos MAX
000147 e015      		ldi r17, 0x05
000148 bd1e      		out SPDR, r17				;Digito 4
000149 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00014b 0000      		nop
00014c e317      		ldi r17, 0x37
00014d bd1e      		out SPDR,r17				;H
00014e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000150 0000      		nop
000151 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000152 b918      		out PORTC, r17
000153 0000      		nop
                 
000154 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000155 b918      		out PORTC, r17
000156 0000      		nop							;Cumplir tcss de hoja de datos MAX
000157 e016      		ldi r17, 0x06
000158 bd1e      		out SPDR, r17				;Digito 5
000159 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00015b 0000      		nop
00015c e010      		ldi r17, 0x00
00015d bd1e      		out SPDR,r17				;0
00015e 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000160 0000      		nop
000161 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000162 b918      		out PORTC, r17
000163 0000      		nop
000164 9508      		ret
                 		
                 ;########################################################## INTERRUPCION POR PCINT0 #########################################################
                 
                 	RTI_SELECT:
000165 92cf
000166 b6cf
000167 92cf
000168 92df
000169 92ef
00016a 92ff
00016b 930f
00016c 931f
00016d 932f
00016e 933f
00016f 934f
000170 935f
000171 936f
000172 937f
000173 938f
000174 939f
000175 93af
000176 93bf      		PUSH_SREG
                 
000177 b109      		in r16, PIND
000178 ff07      		sbrs r16, 7					;Pregunta si PD7 esta en 0
000179 940e 0502 		call MOSTRAR_POTENCIA_MAX	;Llama funcion para mostrar potencia
00017b ff06      		sbrs r16, 6					;Pregunta si PD6 esta en 0
00017c 940e 04d9 		call MOSTRAR_CORRIENTE_MAX	;Llama funcion para mostrar corriente 
00017e ff05      		sbrs r16, 5					;Pregunta si PD5 esta en 0
00017f 940e 04b0 		call MOSTRAR_TENSION_MAX	;Llama funcion para mostrar tension
                 			
000181 91bf
000182 91af
000183 919f
000184 918f
000185 917f
000186 916f
000187 915f
000188 914f
000189 913f
00018a 912f
00018b 911f
00018c 910f
00018d 90ff
00018e 90ef
00018f 90df
000190 90cf
000191 becf
000192 90cf      		POP_SREG
000193 9518      		reti
                 
                 ;########################################################## SUBRUTINA PARA LEER ADC0 ###################################################################
                 	
                 	ADC0:
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000194 e400      		ldi r16, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0) 
000195 9300 007c 		sts ADMUX, r16				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC0  
                 		
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000197 ee0f      		ldi r16, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
000198 9300 007a 		sts ADCSRA, r16				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)
00019a e006      		ldi r16, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
00019b 9300 007b 		sts ADCSRB, r16				;Timer/Counter1 Overflow
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 	LEER_ADC0:
                 
00019d 9100 007a 		lds r16, ADCSRA				;Cargar el control ADCSRA
00019f fd06      		SBRC r16, 6					;Saltar si se completo la conversion ADCS = 0
0001a0 cffc      		rjmp LEER_ADC0 
                 			
0001a1 9110 0078 		lds r17, ADCL				;Cargar parte baja del ADC
0001a3 9100 0079 		lds r16, ADCH				;Cargar parte alta del ADC
0001a5 9310 0103 		sts VAL_CorrienteADCL, r17	;Guardar el valor de ADC en VAL_CorrienteADC
0001a7 9300 0102 		sts VAL_CorrienteADCH, r16
                 	
0001a9 9508      		ret
                 			
                 ;################################################################### SUBRUTINA PARA LEER ADC1 ###################################################################
                 
                 	ADC1:
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0001aa e421      		ldi r18, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0) 
0001ab 9320 007c 		sts ADMUX, r18				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC1    
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0001ad ee2f      		ldi r18, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
0001ae 9320 007a 		sts ADCSRA, r18				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)  
0001b0 e026      		ldi r18, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
0001b1 9320 007b 		sts ADCSRB, r18				;Timer/Counter1 Overflow
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 	LEER_ADC1:
                 
0001b3 9120 007a 		lds r18, ADCSRA				;Cargar el control ADCSRA
0001b5 fd26      		sbrc r18, 6					;Saltar si se completo la conversion ADCS = 0
0001b6 cffc      		rjmp LEER_ADC1 
                 			
0001b7 9120 0078 		lds r18, ADCL				;Cargar parte baja del ADC
0001b9 9130 0079 		lds r19, ADCH				;Cargar parte alta del ADC
0001bb 9320 0101 		sts VAL_TensionADCL, r18	;Guardar el valor de ADC en VAL_TensionADC
0001bd 9330 0100 		sts VAL_TensionADCH, r19
                 	
0001bf 9508      		ret	
                 
                 ;################################################################### CALCULO DE TENSION ###################################################################
                 	
                 	CALCULO_TENSION:
                 		
0001c0 9170 0100 		lds R23, VAL_TensionADCH
0001c2 9160 0101 		lds R22, VAL_TensionADCL	;Carga el numero VAL_Tension en r23:r22
0001c4 e050      		ldi R21,0x00
0001c5 e143      		ldi R20,0x13				;Carga el numero 19 r21:r20
0001c6 940e 031c 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
0001c8 9310 0112 		sts GRANDEH, r17			;Guardamos resultado de la primer multiplicacion
0001ca 9300 0113 		sts GRANDEL, r16
                 
0001cc 9170 0100 		lds R23, VAL_TensionADCH
0001ce 9160 0101 		lds R22, VAL_TensionADCL	;Carga el numero VAL_Tension en r23:r22
0001d0 e050      		ldi R21,0x00
0001d1 e045      		ldi R20,0x05				;Carga el numero 5 r21:r20
0001d2 940e 031c 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
                 		
0001d4 e02a      		ldi	DivisorL,0x0A			;El dividendo ya esta en r16 y r17
0001d5 e030      		ldi	DivisorH,0x00			;Dividimos por 10
0001d6 940e 032e 		call Division16_16
                 
0001d8 9130 0112 		lds r19, GRANDEH
0001da 9120 0113 		lds r18, GRANDEL
0001dc 0f20      		add r18, r16				;Sumamos primer calculo con segundo calculo
0001dd 1f31      		adc r19, r17
0001de 9330 0104 		sts	TensionH, r19			;Valor de la tension
0001e0 9320 0105 		sts	TensionL, r18
                 
0001e2 9170 0100 		lds R23, VAL_TensionADCH
0001e4 9160 0101 		lds R22, VAL_TensionADCL	;Carga el numero VAL_Tension en r23:r22
0001e6 e050      		ldi R21,0x00
0001e7 e043      		ldi R20,0x03				;Carga el numero 3 r21:r20
0001e8 940e 031c 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
                 	
0001ea e624      		ldi	DivisorL,0x64			;El dividendo ya esta en r16 y r17
0001eb e030      		ldi	DivisorH,0x00			;Dividimos por 100
0001ec 940e 032e 		call Division16_16
                 
0001ee 9130 0104 		lds r19, TensionH
0001f0 9120 0105 		lds r18, TensionL
                 
0001f2 0f20      		add r18, DividendoL			;Sumamos primer calculo con segundo calculo
0001f3 1f31      		adc r19, DividendoH
0001f4 9330 0104 		sts	TensionH, r19			;Valor de la tension real
0001f6 9320 0105 		sts	TensionL, r18
0001f8 9508      		ret
                 
                 ;################################################################### CALCULO DE CORRIENTE ###################################################################
                  
                 	CALCULO_CORRIENTE:
                 
0001f9 9170 0102 		lds r23, VAL_CorrienteADCH	;Carga valores del ADC
0001fb 9160 0103 		lds r22, VAL_CorrienteADCL
0001fd e050      		ldi R21,0x00
0001fe e14d      		ldi R20,0x1D				;Carga el numero 29 r21:r20
0001ff 940e 031c 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
000201 e030      		ldi DivisorH, 0x00			;Carga 10 en el divisor (para obtener nuestro factor >> 2.929)
000202 e02a      		ldi DivisorL, 0x0A
000203 940e 032e 		call Division16_16			;Llama funcion division
000205 9310 0112 		sts GRANDEH, r17			;Guardamos resultado de la primer multiplicacion
000207 9300 0113 		sts GRANDEL, r16
                 
000209 9170 0102 		lds r23, VAL_CorrienteADCH	;Carga valores del ADC
00020b 9160 0103 		lds r22, VAL_CorrienteADCL
00020d e050      		ldi R21,0x00
00020e e14d      		ldi R20,0x1D				;Carga el numero 29 r21:r20
00020f 940e 031c 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
000211 e033      		ldi DivisorH, 0x03			;Carga 10 en el divisor (para obtener nuestro factor >> 2.929)
000212 ee28      		ldi DivisorL, 0xE8
000213 940e 032e 		call Division16_16			;Llama funcion division
                 
000215 9130 0112 		lds r19, GRANDEH
000217 9120 0113 		lds r18, GRANDEL
                 
000219 0f31      		add r19, DividendoH			;Sumamos primer calculo con segundo calculo
00021a 1f20      		adc r18, DividendoL
00021b 9330 0108 		sts CorrienteH, r19			;Resultado corriente
00021d 9320 0109 		sts CorrienteL, r18
                 		 				
00021f 9508      		ret
                 
                 ;################################################################### CALCULO DE POTENCIA ###################################################################
                  
                 	CALCULO_POTENCIA:
                 
000220 9110 0104 		lds DividendoH, TensionH	;Cargar valor de tension
000222 9100 0105 		lds DividendoL, TensionL
000224 e033      		ldi DivisorH, 0x03			;Cargar 1000 en divisor
000225 ee28      		ldi DivisorL, 0xE8
000226 940e 032e 		call Division16_16			;Llamar funcion division
000228 9310 0112 		sts GRANDEH, r17			;Guardar resultado
00022a 9300 0113 		sts GRANDEL, r16
                 
00022c 2d1f      		mov DividendoH, RestoH		;Cargar resto para dividir
00022d 2d0e      		mov DividendoL, RestoL
00022e e030      		ldi DivisorH, 0x00			;Cargar 100 en divisor
00022f e624      		ldi DivisorL, 0x64
000230 940e 032e 		call Division16_16			;Llamar funcion division		
000232 9300 0114 		sts Temp1, r16				;Guardar resultado (primer decimal)
                 
000234 2d1f      		mov DividendoH, RestoH		;Cargar resto para dividir
000235 2d0e      		mov DividendoL, RestoL
000236 e030      		ldi DivisorH, 0x00			;Cargar 10 en divisor
000237 e02a      		ldi DivisorL, 0x0A
000238 940e 032e 		call Division16_16			;Llamar funcion division
00023a 9300 0115 		sts Temp2, r16				;Guardar resultado (segundo decimal)
00023c 92e0 0116 		sts Temp3, RestoL			;Guardar resto (tercer decimal)
                 
00023e 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
000240 9160 0109 		lds r22, CorrienteL
000242 9150 0112 		lds r21, GRANDEH			;Cargar valor entero de tension
000244 9140 0113 		lds r20, GRANDEL
000246 940e 031c 		call mul16x16_16			;Llamar funcion multiplicacion
000248 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
00024a 9300 0107 		sts PotenciaL, r16
                 
00024c 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
00024e 9160 0109 		lds r22, CorrienteL
000250 e050      		ldi r21, 0x00				;Cargar valor del primer decimal
000251 9140 0114 		lds r20, Temp1
000253 940e 031c 		call mul16x16_16			;Llamar funcion multiplicacion
000255 e030      		ldi DivisorH, 0x00			;Cargar 10 en divisor para acomodar numero
000256 e02a      		ldi DivisorL, 0x0A
000257 940e 032e 		call Division16_16			;Llamar funcion division		
000259 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
00025b 9120 0107 		lds r18, PotenciaL
00025d 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
00025e 1f13      		adc r17, r19
00025f 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
000261 9300 0107 		sts PotenciaL, r16
                 
000263 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
000265 9160 0109 		lds r22, CorrienteL
000267 e050      		ldi r21, 0x00				;Cargar valor del segundo decimal
000268 9140 0115 		lds r20, Temp2
00026a 940e 031c 		call mul16x16_16			;Llamar funcion multiplicacion
00026c e030      		ldi DivisorH, 0x00			;Cargar 100 en divisor para acomodar numero
00026d e624      		ldi DivisorL, 0x64
00026e 940e 032e 		call Division16_16			;Llamar funcion division		
000270 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
000272 9120 0107 		lds r18, PotenciaL
000274 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
000275 1f13      		adc r17, r19
000276 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
000278 9300 0107 		sts PotenciaL, r16
                 
00027a 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
00027c 9160 0109 		lds r22, CorrienteL
00027e e050      		ldi r21, 0x00				;Cargar valor del segundo decimal
00027f 9140 0116 		lds r20, Temp3
000281 940e 031c 		call mul16x16_16			;Llamar funcion multiplicacion
000283 e033      		ldi DivisorH, 0x03			;Cargar 1000 en divisor para acomodar numero
000284 ee28      		ldi DivisorL, 0xE8
000285 940e 032e 		call Division16_16			;Llamar funcion division		
000287 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
000289 9120 0107 		lds r18, PotenciaL
00028b 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
00028c 1f13      		adc r17, r19
00028d 9310 0106 		sts PotenciaH, r17			;Guardar resultado de la potencia
00028f 9300 0107 		sts PotenciaL, r16
                 
000291 9508      		ret
                 
                 ;################################################################### CALCULO DE CORRIENTE PWM ###################################################################
                  
                 	CALCULO_CORRIENTE_PWM:
                 		
000292 9170 0108 		lds r23, CorrienteH			;Valor corriente
000294 9160 0109 		lds r22, CorrienteL	
000296 e050      		ldi r21, 0x00				;Multiplicar por 2
000297 e042      		ldi r20, 0x02
000298 940e 031c 		call mul16x16_16
00029a e030      		ldi r19, 0x00				;dividir por 10
00029b e02a      		ldi r18, 0x0A
00029c 940e 032e 		call Division16_16
00029e 9310 0117 		sts CorrienteH_PWM, r17
0002a0 9300 0118 		sts CorrienteL_PWM, r16
                 
0002a2 9170 0108 		lds r23, CorrienteH			;Valor corriente
0002a4 9160 0109 		lds r22, CorrienteL	
0002a6 e050      		ldi r21, 0x00				;Multiplicar por 2
0002a7 e047      		ldi r20, 0x07
0002a8 940e 031c 		call mul16x16_16
0002aa e030      		ldi r19, 0x00				;dividir por 10
0002ab e624      		ldi r18, 0x64
0002ac 940e 032e 		call Division16_16
0002ae 9140 0117 		lds r20, CorrienteH_PWM
0002b0 9130 0118 		lds r19, CorrienteL_PWM
0002b2 0f03      		add r16, r19
0002b3 1f14      		adc r17, r20
0002b4 9310 0117 		sts CorrienteH_PWM, r17
0002b6 9300 0118 		sts CorrienteL_PWM, r16
                 
0002b8 9170 0108 		lds r23, CorrienteH			;Valor corriente
0002ba 9160 0109 		lds r22, CorrienteL	
0002bc e050      		ldi r21, 0x00				;Multiplicar por 2
0002bd e042      		ldi r20, 0x02
0002be 940e 031c 		call mul16x16_16
0002c0 e033      		ldi r19, 0x03				;dividir por 10
0002c1 ee28      		ldi r18, 0xE8
0002c2 940e 032e 		call Division16_16
0002c4 9140 0117 		lds r20, CorrienteH_PWM
0002c6 9130 0118 		lds r19, CorrienteL_PWM
0002c8 0f03      		add r16, r19
0002c9 1f14      		adc r17, r20
0002ca e040      		ldi r20, 0x00
0002cb ec3f      		ldi r19, 0xCF
0002cc 0f03      		add r16, r19
0002cd 1f14      		adc r17, r20
0002ce 9310 0117 		sts CorrienteH_PWM, r17
0002d0 9300 0118 		sts CorrienteL_PWM, r16
                 		
0002d2 9508      		ret
                 
                 ;################################################################### CALCULO DE POTENCIA PWM ###################################################################
                  
                 	CALCULO_POTENCIA_PWM:
                 		
0002d3 9110 0106 		lds DividendoH, PotenciaH	;Cargar valor de potencia
0002d5 9100 0107 		lds DividendoL, PotenciaL
0002d7 e030      		ldi DivisorH, 0x00			;Cargar 10 en divisor
0002d8 e02a      		ldi DivisorL, 0x0A
0002d9 940e 032e 		call Division16_16			;Llamar funcion division
0002db 9310 0112 		sts GRANDEH, r17			;Guardar resultado
0002dd 9300 0113 		sts GRANDEL, r16
                 
0002df 9110 0112 		lds r17, GRANDEH			;Valor de potencia hasta 6000
0002e1 9100 0113 		lds r16, GRANDEL	
0002e3 e030      		ldi r19, 0x00				;dividir por 10
0002e4 e02a      		ldi r18, 0x0A
0002e5 940e 032e 		call Division16_16
0002e7 9310 0119 		sts PotenciaH_PWM, r17
0002e9 9300 011a 		sts PotenciaL_PWM, r16
                 
0002eb 9170 0112 		lds r23, GRANDEH			;Valor corriente
0002ed 9160 0113 		lds r22, GRANDEL	
0002ef e050      		ldi r21, 0x00				;Multiplicar por 2
0002f0 e043      		ldi r20, 0x03
0002f1 940e 031c 		call mul16x16_16
0002f3 e030      		ldi r19, 0x00				;dividir por 100
0002f4 e624      		ldi r18, 0x64
0002f5 940e 032e 		call Division16_16
0002f7 9140 0119 		lds r20, PotenciaH_PWM
0002f9 9130 011a 		lds r19, PotenciaL_PWM
0002fb 0f03      		add r16, r19
0002fc 1f14      		adc r17, r20
0002fd 9310 0119 		sts PotenciaH_PWM, r17
0002ff 9300 011a 		sts PotenciaL_PWM, r16
                 
000301 9170 0112 		lds r23, GRANDEH			;Valor corriente
000303 9160 0113 		lds r22, GRANDEL	
000305 e050      		ldi r21, 0x00				;Multiplicar por 2
000306 e046      		ldi r20, 0x06
000307 940e 031c 		call mul16x16_16
000309 e033      		ldi r19, 0x03				;dividir por 1000
00030a ee28      		ldi r18, 0xE8
00030b 940e 032e 		call Division16_16
00030d 9140 0119 		lds r20, PotenciaH_PWM
00030f 9130 011a 		lds r19, PotenciaL_PWM
000311 0f03      		add r16, r19
000312 1f14      		adc r17, r20
000313 e040      		ldi r20, 0x00
000314 ec3f      		ldi r19, 0xCF				;Sumar 1 volt
000315 0f03      		add r16, r19
000316 1f14      		adc r17, r20
000317 9310 0119 		sts PotenciaH_PWM, r17
000319 9300 011a 		sts PotenciaL_PWM, r16
                 		
00031b 9508      		ret
                 		
                 ;################################################################### FUNCION DE MULTIPLICACION ###################################################################
                 
                 	mul16x16_16:
                 
00031c 9f64      		mul	r22, r20				;Multiplica parte baja de A con parte baja de B
00031d 0180      		movw	r17:r16, r1:r0
00031e 9f74      		mul	r23, r20				;Multiplica parte alta de A con parte baja de B
00031f 0d10      		add	r17, r0
000320 9f56      		mul	r21, r22				;Multiplica parte baja de A con parte alta de B
000321 0d10      		add	r17, r0
                 									;Resultado r17, r16
000322 9508      		ret
                 
                 ;############################################################ FUNCION DE MULTIPLICACION DEL RESTO ###################################################################
                 
                 	mul16x16_24:
000323 9f75      		mul		r23, r21			;Multiplica parte alta de A con parte alta de B
000324 2d20      		mov		r18, r0
000325 9f64      		mul		r22, r20			;Multiplica parte baja de A con parte baja de B
000326 0180      		movw	r17:r16, r1:r0
000327 9f74      		mul		r23, r20			;Multiplica parte alta de A con parte baja de Bah * bl
000328 0d10      		add		r17, r0
000329 1d21      		adc		r18, r1
00032a 9f56      		mul		r21, r22			;Multiplica parte baja de A con parte alta de B
00032b 0d10      		add		r17, r0
00032c 1d21      		adc		r18, r1
                 									;Resultado r18, r17, r16
00032d 9508      		ret
                 
                 
                 ;################################################################### FUNCION DE DIVISION ###################################################################
                 
                 	Division16_16:	
00032e 24ee      		clr	RestoL					;Borra byte low de Resto
00032f 18ff      		sub	RestoH,RestoH			;Borra el byte alto y acarreo
000330 e141      		ldi	Contador,17				;Contador de bucle infinito
                 		div_1:	
000331 1f00      		rol	DividendoL				;Desplazo a la izquierda el dividendo
000332 1f11      		rol	DividendoH
000333 954a      		dec	Contador				;Decremento contador
000334 f429      		brne	div_2				;if done
000335 92e0 010a 		sts RestodivL, RestoL
000337 92f0 010b 		sts RestodivH, RestoH
000339 9508      		ret							;Salida
                 		div_2:	
00033a 1cee      		rol	RestoL					;Resplazo a la izquerda el resto
00033b 1cff      		rol	RestoH
00033c 1ae2      		sub	RestoL,DivisorL			;Resto = resto - divisor
00033d 0af3      		sbc	RestoH,DivisorH	
00033e f420      		brcc	div_3				;Si el resultado es negativo
00033f 0ee2      		add	RestoL,DivisorL			;Restaurar el resto
000340 1ef3      		adc	RestoH,DivisorH
000341 9488      		clc							;Limpia el acarreo para ser deplazado al resultado
000342 cfee      		rjmp	div_1				;Else
                 		div_3:	
000343 9408      		sec							;Pone a 1 la bandera de acarreo para ser trasladado al resultado
000344 cfec      		rjmp	div_1
                 									;Resultado de la division r17, r16
                 									;Resto de la division r15, r14
                 
                 ;########################################################## MOSTRAR POTENCIA #########################################################
                 
                 	MOSTRAR_POTENCIA:
                 		
000345 90d0 0106 		lds ENTEROH, PotenciaH		;Cargar valor de potencia alta
000347 90c0 0107 		lds ENTEROL, PotenciaL		;Cargar valor de potencia baja
                 		
000349 940e 0441 		call DESCOMPOSICION
                 				
00034b 940e 043c 		call USART_ESPERA			
00034d e540      		ldi r20, 0x50				; P
00034e 9340 00c6 		sts UDR0, r20
                 
000350 940e 043c 		call USART_ESPERA
000352 e240      		ldi r20, 0x20				; (espacio)
000353 9340 00c6 		sts UDR0, r20
                 
000355 940e 043c 		call USART_ESPERA			
000357 e34d      		ldi r20, 0x3D				; =
000358 9340 00c6 		sts UDR0, r20
                 
00035a 940e 043c 		call USART_ESPERA
00035c e240      		ldi r20, 0x20				; (espacio)
00035d 9340 00c6 		sts UDR0, r20
                 
00035f 940e 0466 		call MOSTRAR
                 
000361 940e 043c 		call USART_ESPERA
000363 e240      		ldi r20, 0x20				; (espacio)
000364 9340 00c6 		sts UDR0, r20
                 
000366 940e 043c 		call USART_ESPERA			
000368 e547      		ldi r20, 0x57				; W
000369 9340 00c6 		sts UDR0, r20
                 
00036b 940e 043c 		call USART_ESPERA			
00036d e641      		ldi r20, 0x61				; a
00036e 9340 00c6 		sts UDR0, r20
                 
000370 940e 043c 		call USART_ESPERA			
000372 e744      		ldi r20, 0x74				; t
000373 9340 00c6 		sts UDR0, r20
                 
000375 940e 043c 		call USART_ESPERA			
000377 e744      		ldi r20, 0x74				; t
000378 9340 00c6 		sts UDR0, r20
                 
00037a 940e 043c 		call USART_ESPERA			
00037c e04a      		ldi r20, 0x0A				; (salto de linea)
00037d 9340 00c6 		sts UDR0, r20
                 
00037f 940e 043c 		call USART_ESPERA			
000381 e04d      		ldi r20, 0x0D				; (retorno de carro)
000382 9340 00c6 		sts UDR0, r20
                 
000384 2711      		clr r17						;Limpiar registro de dato recibido
000385 9310 0111 		sts DATO_RX, r17
                 	
000387 9508      		ret
                 
                 ;######################################################### MOSTRAR CORRIENTE #########################################################
                 
                 	MOSTRAR_CORRIENTE:
                 		
000388 90d0 0108 		lds ENTEROH, CorrienteH		;Cargar valor de corriente alta
00038a 90c0 0109 		lds ENTEROL, CorrienteL		;Cargar valor de corriente baja
                 		
00038c 940e 0441 		call DESCOMPOSICION
                 				
00038e 940e 043c 		call USART_ESPERA			
000390 e449      		ldi r20, 0x49				; I
000391 9340 00c6 		sts UDR0, r20
                 
000393 940e 043c 		call USART_ESPERA
000395 e240      		ldi r20, 0x20				; (espacio)
000396 9340 00c6 		sts UDR0, r20
                 
000398 940e 043c 		call USART_ESPERA			
00039a e34d      		ldi r20, 0x3D				; =
00039b 9340 00c6 		sts UDR0, r20
                 
00039d 940e 043c 		call USART_ESPERA
00039f e240      		ldi r20, 0x20				; (espacio)
0003a0 9340 00c6 		sts UDR0, r20
                 
0003a2 940e 0466 		call MOSTRAR
                 
0003a4 940e 043c 		call USART_ESPERA
0003a6 e240      		ldi r20, 0x20				; (espacio)
0003a7 9340 00c6 		sts UDR0, r20
                 
0003a9 940e 043c 		call USART_ESPERA			
0003ab e441      		ldi r20, 0x41				; A
0003ac 9340 00c6 		sts UDR0, r20
                 
0003ae 940e 043c 		call USART_ESPERA			
0003b0 e64d      		ldi r20, 0x6D				; m
0003b1 9340 00c6 		sts UDR0, r20
                 
0003b3 940e 043c 		call USART_ESPERA			
0003b5 e740      		ldi r20, 0x70				; p
0003b6 9340 00c6 		sts UDR0, r20
                 
0003b8 940e 043c 		call USART_ESPERA			
0003ba e645      		ldi r20, 0x65				; e
0003bb 9340 00c6 		sts UDR0, r20
                 		
0003bd 940e 043c 		call USART_ESPERA			
0003bf e742      		ldi r20, 0x72				; r
0003c0 9340 00c6 		sts UDR0, r20
                 
0003c2 940e 043c 		call USART_ESPERA			
0003c4 e04a      		ldi r20, 0x0A				; (salto de linea)
0003c5 9340 00c6 		sts UDR0, r20
                 
0003c7 940e 043c 		call USART_ESPERA			
0003c9 e04d      		ldi r20, 0x0D				; (retorno de carro)
0003ca 9340 00c6 		sts UDR0, r20
                 
0003cc 2711      		clr r17						;Limpiar registro de dato recibido
0003cd 9310 0111 		sts DATO_RX, r17
                 	
0003cf 9508      		ret
                 
                 ;########################################################## MOSTRAR TENSION #########################################################
                 
                 	MOSTRAR_TENSION:
                 
0003d0 90d0 0104 		lds ENTEROH, TensionH		;Cargar valor de tension alta
0003d2 90c0 0105 		lds ENTEROL, TensionL		;Cargar valor de tension baja
                 		
0003d4 940e 0441 		call DESCOMPOSICION
                 				
0003d6 940e 043c 		call USART_ESPERA			
0003d8 e546      		ldi r20, 0x56				; V
0003d9 9340 00c6 		sts UDR0, r20
                 
0003db 940e 043c 		call USART_ESPERA
0003dd e240      		ldi r20, 0x20				; (espacio)
0003de 9340 00c6 		sts UDR0, r20
                 
0003e0 940e 043c 		call USART_ESPERA			
0003e2 e34d      		ldi r20, 0x3D				; =
0003e3 9340 00c6 		sts UDR0, r20
                 
0003e5 940e 043c 		call USART_ESPERA
0003e7 e240      		ldi r20, 0x20				; (espacio)
0003e8 9340 00c6 		sts UDR0, r20
                 
0003ea 940e 0466 		call MOSTRAR
                 
0003ec 940e 043c 		call USART_ESPERA
0003ee e240      		ldi r20, 0x20				; (espacio)
0003ef 9340 00c6 		sts UDR0, r20
                 
0003f1 940e 043c 		call USART_ESPERA			
0003f3 e546      		ldi r20, 0x56				; V
0003f4 9340 00c6 		sts UDR0, r20
                 
0003f6 940e 043c 		call USART_ESPERA			
0003f8 e64f      		ldi r20, 0x6F				; o
0003f9 9340 00c6 		sts UDR0, r20
                 
0003fb 940e 043c 		call USART_ESPERA			
0003fd e64c      		ldi r20, 0x6C				; l
0003fe 9340 00c6 		sts UDR0, r20
                 
000400 940e 043c 		call USART_ESPERA			
000402 e744      		ldi r20, 0x74				; t
000403 9340 00c6 		sts UDR0, r20
                 		
000405 940e 043c 		call USART_ESPERA			
000407 e04a      		ldi r20, 0x0A				; (salto de linea)
000408 9340 00c6 		sts UDR0, r20
                 
00040a 940e 043c 		call USART_ESPERA			
00040c e04d      		ldi r20, 0x0D				; (retorno de carro)
00040d 9340 00c6 		sts UDR0, r20
                 
00040f 2711      		clr r17						;Limpiar registro de dato recibido
000410 9310 0111 		sts DATO_RX, r17
000412 9508      		ret
                 
                 ;########################################################## USART RECEPCION #########################################################
                 
                 	USART_RXC:
                 
000413 92cf
000414 b6cf
000415 92cf
000416 92df
000417 92ef
000418 92ff
000419 930f
00041a 931f
00041b 932f
00041c 933f
00041d 934f
00041e 935f
00041f 936f
000420 937f
000421 938f
000422 939f
000423 93af
000424 93bf      		PUSH_SREG
000425 9100 00c6 		lds r16, UDR0
000427 9300 0111 		sts DATO_RX, r16
000429 91bf
00042a 91af
00042b 919f
00042c 918f
00042d 917f
00042e 916f
00042f 915f
000430 914f
000431 913f
000432 912f
000433 911f
000434 910f
000435 90ff
000436 90ef
000437 90df
000438 90cf
000439 becf
00043a 90cf      		POP_SREG
00043b 9518      		reti
                 
                 ;########################################################## USART ESPERA #########################################################
                 
                 	USART_ESPERA:
                 
00043c 91a0 00c0 		lds r26, UCSR0A				;Espera que se limpie la bandera de transmision
00043e ffa5      		sbrs r26, UDRE0
00043f cffc      		rjmp USART_ESPERA
000440 9508      		ret
                 
                 ;########################################################## DESCOMPOSICION ENTERO #########################################################
                 		
                 	DESCOMPOSICION:
                 
000441 e0ec      		ldi	ZL, LOW(VECTOR)
000442 e0f1      		ldi	ZH, HIGH(VECTOR)			
000443 e277      		ldi rmp, 0x27				;Cargamos 10000
000444 2f67      		mov rBin2H,rmp
000445 e170      		ldi rmp, 0x10
000446 2f57      		mov rBin2L,rmp
000447 d012      		rcall Bin2ToDigit			;Funcion para calcular digito
000448 e073      		ldi rmp, 0x03				;Cargamos 1000
000449 2f67      		mov rBin2H,rmp
00044a ee78      		ldi rmp, 0xE8
00044b 2f57      		mov rBin2L,rmp
00044c d00d      		rcall Bin2ToDigit			;Funcion para calcular digito
00044d e070      		ldi rmp, 0x00				;Cargamos 100
00044e 2f67      		mov rBin2H,rmp
00044f e674      		ldi rmp, 0x64
000450 2f57      		mov rBin2L,rmp
000451 d008      		rcall Bin2ToDigit			;Funcion para calcular digito
000452 e070      		ldi rmp, 0x00				;Cargamos 10
000453 2f67      		mov rBin2H,rmp
000454 e07a      		ldi rmp, 0x0A
000455 2f57      		mov rBin2L,rmp
000456 d003      		rcall Bin2ToDigit			;Funcion para calcular digito
000457 82c0      		st z,ENTEROL
000458 9734      		sbiw ZL,4					;Poner el puntero en el primer BCD
000459 9508      		ret
                 
                 	Bin2ToDigit:
00045a 2777      		clr rmp						;Conteo en cero
                 
                 	Bin2ToDigita:
00045b 16d6      		cp ENTEROH,rBin2H			;Comparo nro con comparacion parte alta
00045c f038      		brcs Bin2ToDigitc			;Si Carry=1 el nro es menor a comparacion, vuelve a rutina para comparar con un valor menor
00045d f411      		brne Bin2ToDigitb	 
00045e 16c5      		cp ENTEROL,rBin2L			;Si es igual, Comparo nro con comparacion parte baja
00045f f020      		brcs Bin2ToDigitc			;Si Carry=1 nro menor a comparacion
                 
                 	Bin2ToDigitb:			
000460 1ac5      		sub ENTEROL,rBin2L			;Resto partes bajas
000461 0ad6      		sbc ENTEROH,rBin2H			;Resto partes altas con carry
000462 9573      		inc rmp						;Incremento cuenta para digito BCD
000463 cff7      		rjmp Bin2ToDigita			;Repito el proceso hasta que sea menor a comparacion
                 
                 	Bin2ToDigitc:
000464 9371      		st z+,rmp					;Salva el digito 
000465 9508      		ret
                 
                 ;########################################################## MOSTRAR ENTERO #########################################################
                 	
                 	MOSTRAR:
                 		
000466 940e 043c 		call USART_ESPERA
000468 91b1      		ld	r27, Z+					;Cargamos decena
000469 e3d0      		ldi r29, 48
00046a 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00046b 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
00046d 940e 043c 		call USART_ESPERA
                 	
00046f 940e 043c 		call USART_ESPERA
000471 91b1      		ld	r27, Z+					;Cargamos unidad
000472 e3d0      		ldi r29, 48
000473 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000474 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000476 940e 043c 		call USART_ESPERA
                 
000478 940e 043c 		call USART_ESPERA			
00047a e24c      		ldi r20, 0x2C				; ,
00047b 9340 00c6 		sts UDR0, r20				;Enviamos por puerto serie
                 
00047d 940e 043c 		call USART_ESPERA
00047f 91b1      		ld	r27, Z+					;Cargamos primer decimal
000480 e3d0      		ldi r29, 48
000481 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000482 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000484 940e 043c 		call USART_ESPERA
                 
000486 940e 043c 		call USART_ESPERA
000488 91b1      		ld	r27, Z+					;Cargamos segundo decimal
000489 e3d0      		ldi r29, 48
00048a 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00048b 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
00048d 940e 043c 		call USART_ESPERA
                 	
00048f 940e 043c 		call USART_ESPERA
000491 81b0      		ld	r27, Z					;Cargamos tercer decimal
000492 e3d0      		ldi r29, 48
000493 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000494 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
000496 940e 043c 		call USART_ESPERA
                 
000498 9734      		SBIW ZL, 4					;Poner el puntero en el primer BCD
000499 9508      		ret
                 		
                 ;########################################################## USART COMPARACION #########################################################
                 
                 	USART_COMPARACION:
                 		
00049a 9100 0111 		lds r16, DATO_RX			;Cargar dato recibido
00049c e516      		ldi r17, 0x56				;Comparar con V
00049d 1301      		cpse r16, r17
00049e c002      		rjmp I						;Si es falso, compara con I
00049f 940e 03d0 		call MOSTRAR_TENSION		
                 		I:
0004a1 e419      		ldi r17, 0x49				;Comparar con I
0004a2 1301      		cpse r16, r17
0004a3 c002      		rjmp P						;Si es falso, compara con P
0004a4 940e 0388 		call MOSTRAR_CORRIENTE
                 		P:
0004a6 e510      		ldi r17, 0x50				;Comparar con P
0004a7 1301      		cpse r16, r17
0004a8 9508      		ret
0004a9 940e 0345 		call MOSTRAR_POTENCIA
0004ab 9508      		ret
                 
                 ;############################################################# SPI ESPERA ############################################################
                 
                 	SPI_ESPERA:	
0004ac b5ad      		in r26, SPSR		
0004ad ffa7      		sbrs r26, SPIF				; Esperar que se complete la transmisión
0004ae cffd      		rjmp SPI_ESPERA
0004af 9508      		ret
                 
                 ;############################################################# MOSTRAR TENSION MAX ############################################################
                 
                 	MOSTRAR_TENSION_MAX:
                 				
0004b0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0004b1 b918      		out PORTC, r17
0004b2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0004b3 e016      		ldi r17, 0x06
0004b4 bd1e      		out SPDR, r17				;Digito 5
0004b5 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004b7 0000      		nop
0004b8 e31e      		ldi r17, 0b0011_1110
0004b9 bd1e      		out SPDR,r17				; U
0004ba 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004bc 0000      		nop
0004bd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004be b918      		out PORTC, r17
0004bf 0000      		nop
                 
0004c0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0004c1 b918      		out PORTC, r17
0004c2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0004c3 e015      		ldi r17, 0x05
0004c4 bd1e      		out SPDR, r17				;Digito 5
0004c5 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004c7 0000      		nop
0004c8 e019      		ldi r17, 0b0000_1001
0004c9 bd1e      		out SPDR,r17				; =
0004ca 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004cc 0000      		nop
0004cd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004ce b918      		out PORTC, r17
0004cf 0000      		nop
                 
0004d0 90d0 0104 		lds ENTEROH, TensionH		;Cargar valor de tension alta
0004d2 90c0 0105 		lds ENTEROL, TensionL		;Cargar valor de tension baja
0004d4 940e 0441 		call DESCOMPOSICION
0004d6 940e 052b 		call TRANSMITIR_MAX
0004d8 9508      		ret
                 
                 ;############################################################# MOSTRAR CORRIENTE MAX ############################################################
                 	
                 	MOSTRAR_CORRIENTE_MAX:
                 		
0004d9 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0004da b918      		out PORTC, r17
0004db 0000      		nop							;Cumplir tcss de hoja de datos MAX
0004dc e016      		ldi r17, 0x06
0004dd bd1e      		out SPDR, r17				;Digito 5
0004de 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004e0 0000      		nop
0004e1 e310      		ldi r17, 0b0011_0000
0004e2 bd1e      		out SPDR,r17				; I
0004e3 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004e5 0000      		nop
0004e6 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004e7 b918      		out PORTC, r17
0004e8 0000      		nop
                 
0004e9 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0004ea b918      		out PORTC, r17
0004eb 0000      		nop							;Cumplir tcss de hoja de datos MAX
0004ec e015      		ldi r17, 0x05
0004ed bd1e      		out SPDR, r17				;Digito 5
0004ee 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004f0 0000      		nop
0004f1 e019      		ldi r17, 0b0000_1001
0004f2 bd1e      		out SPDR,r17				; =
0004f3 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
0004f5 0000      		nop
0004f6 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004f7 b918      		out PORTC, r17
0004f8 0000      		nop
                 
0004f9 90d0 0108 		lds ENTEROH, CorrienteH		;Cargar valor de corriente alta
0004fb 90c0 0109 		lds ENTEROL, CorrienteL		;Cargar valor de corriente baja
0004fd 940e 0441 		call DESCOMPOSICION
0004ff 940e 052b 		call TRANSMITIR_MAX
000501 9508      		ret
                 		
                 ;############################################################# MOSTRAR CORRIENTE MAX ############################################################
                 	
                 	MOSTRAR_POTENCIA_MAX:
                 
000502 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000503 b918      		out PORTC, r17
000504 0000      		nop							;Cumplir tcss de hoja de datos MAX
000505 e016      		ldi r17, 0x06
000506 bd1e      		out SPDR, r17				;Digito 5
000507 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000509 0000      		nop
00050a e617      		ldi r17, 0b0110_0111
00050b bd1e      		out SPDR,r17				; P
00050c 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00050e 0000      		nop
00050f e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000510 b918      		out PORTC, r17
000511 0000      		nop
                 
000512 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000513 b918      		out PORTC, r17
000514 0000      		nop							;Cumplir tcss de hoja de datos MAX
000515 e015      		ldi r17, 0x05
000516 bd1e      		out SPDR, r17				;Digito 5
000517 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000519 0000      		nop
00051a e019      		ldi r17, 0b0000_1001
00051b bd1e      		out SPDR,r17				; =
00051c 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
00051e 0000      		nop
00051f e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000520 b918      		out PORTC, r17
000521 0000      		nop
                 
000522 90d0 0106 		lds ENTEROH, PotenciaH		;Cargar valor de potencia alta
000524 90c0 0107 		lds ENTEROL, PotenciaL		;Cargar valor de potencia baja
000526 940e 0441 		call DESCOMPOSICION
000528 940e 052b 		call TRANSMITIR_MAX
00052a 9508      		ret
                 		
                 ;############################################################# TRANSMITIR MAX ############################################################
                 	
                 	TRANSMITIR_MAX:
                 			
                 	;ENTERO PARTE ALTA
00052b e010      		ldi r17, (0<<PC5)			;Mando 0 a PB0 para indicarle a MAX que inicia transferencia de datos
00052c b918      		out PORTC, r17
00052d 0000      		nop
00052e e014      		ldi r17, 0x04
00052f bd1e      		out SPDR, r17				;Digito entero alto
000530 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000532 0000      		nop
                 
000533 9111      		ld	r17, Z+						
000534 bd1e      		out SPDR, r17				;Envio digito entero alto
000535 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000537 0000      		nop
000538 e210      		ldi r17, (1<<PC5)			;Mando 1 a PB0 para indicarle a MAX que finalizo transferencia
000539 b918      		out PORTC, r17
00053a 0000      		nop
                 
                 	;ENTERO PARTE BAJA
00053b e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00053c b918      		out PORTC, r17
00053d 0000      		nop
00053e e013      		ldi r17, 0x03
00053f bd1e      		out SPDR, r17				;Digito entero bajo
000540 940e 04ac 		call SPI_ESPERA 			;Empezar la TX de información
000542 0000      		nop
                 	
000543 9111      		ld	r17, Z+						
000544 ef00      		ldi r16, 0xF0
000545 0f10      		add r17, r16				;Suma para mostrar puntto decimal
000546 bd1e      		out SPDR, r17				;Envio digito entero bajo
000547 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000549 0000      		nop
00054a e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00054b b918      		out PORTC, r17
00054c 0000      		nop
                 
                 	;PRIMER DECIMAL
00054d e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00054e b918      		out PORTC, r17
00054f 0000      		nop
000550 e012      		ldi r17, 0x02
000551 bd1e      		out SPDR, r17				;Digito primer decimal
000552 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000554 0000      		nop
                 
000555 9111      		ld	r17, Z+					;Primer decimal
000556 bd1e      		out SPDR, r17				;Envio primer decimal
000557 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000559 0000      		nop
00055a e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00055b b918      		out PORTC, r17
00055c 0000      		nop
                 
                 	;SEGUNDO DECIMAL
00055d e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00055e b918      		out PORTC, r17
00055f 0000      		nop
000560 e011      		ldi r17, 0x1
000561 bd1e      		out SPDR, r17				;Digito segundo decimal
000562 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000564 0000      		nop
                 
000565 9111      		ld	r17, Z+					;Segundo decimal
000566 bd1e      		out SPDR, r17				;Envio segundo decimal
000567 940e 04ac 		call SPI_ESPERA				;Empezar la TX de información
000569 0000      		nop
00056a e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00056b b918      		out PORTC, r17
00056c 0000      		nop
                 		
00056d 8110      		ld	r17, Z
00056e 9734      		SBIW ZL, 4
00056f 2711      		clr r17
                 
000570 9508      		ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
r0 :   7 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  27 r13:  14 r14:  14 r15:  14 
r16:  99 r17: 233 r18:  53 r19:  54 r20: 112 r21:  33 r22:  30 r23:  42 
r24:   6 r25:   6 r26:  10 r27:  21 r28:   0 r29:  10 r30:   4 r31:   1 
x  :   0 y  :   0 z  :  12 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  15 add   :  23 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   2 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 145 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :   0 cpse  :   3 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   1 jmp   :   5 
ld    :  10 ldd   :   0 ldi   : 220 lds   :  84 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  13 movw  :   2 mul   :   7 muls  :   0 mulsu :   0 
neg   :   0 nop   :  84 or    :   0 ori   :   0 out   :  94 pop   :  51 
push  :  51 rcall :   4 ret   :  25 reti  :   4 rjmp  :   9 rol   :   4 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   3 sbr   :   0 sbrc  :   2 sbrs  :   5 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   : 111 
sub   :   3 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ae2   2698      0   2698   32768   8.2%
[.dseg] 0x000100 0x00011b      0     27     27    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
