
AVRASM ver. 2.1.57  C:\Users\crist\Desktop\Kituu\Uader\2 Año - 2 Cuatrimestre\Sistemas Digitales IV\Trabajo Final\SDIV-ASMBL\Medidor de U  I.asm Wed Aug 26 15:31:51 2020

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m328Pdef.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328PDEF_INC_
                 #define _M328PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328P
                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * MULTIMEDIDOR DE CC
                  *
                  * 
                  *   Autores: Correa Bruno, De Battista Cristian, Errecart Matias
                  *	 
                  */ 
                  ;########################################################################################################################################## 
                  ;############################################################### DECLARACION ##############################################################
                  ;##########################################################################################################################################
                 
                 .def	ENTEROL=r12					;Subrutina mostrar
                 .def	ENTEROH=r13					;Subrutina mostrar
                 .def	RestoL=r14					;Subrutina division
                 .def	RestoH=r15					;Subrutina division
                 .def	DividendoL=r16				;Subrutina division
                 .def	DividendoH=r17				;Subrutina division
                 .def	DivisorL=r18				;Subrutina division
                 .def	DivisorH=r19				;Subrutina division
                 .def	Contador=r20				;Subrutina division
                 .def	rBin2L=r21					;Subrutina descomposicion
                 .def	rBin2H=r22					;Subrutina descomposicion
                 .def	rmp=r23						;Subrutina descomposicion
                 
                 .MACRO	PUSH_SREG					;Guardar en la pila la posicion de memoria
                 		push r12
                 		in r12, SREG			
                 		push r12					;Guardar registros de trabajo
                 		push r13
                 		push r14
                 		push r15
                 		push r16
                 		push r17
                 		push r18
                 		push r19
                 		push r20
                 		push r21
                 		push r22
                 		push r23
                 		push r24
                 		push r25
                 		push r26
                 		push r27
                 .ENDMACRO
                 
                 .MACRO	POP_SREG
                 		pop r27
                 		pop r26
                 		pop r25
                 		pop r24
                 		pop r23
                 		pop r22
                 		pop r21
                 		pop r20
                 		pop r19
                 		pop r18
                 		pop r17
                 		pop r16
                 		pop r15
                 		pop r14
                 		pop r13
                 		pop r12
                 		out sreg, r12				;Recuperar de la pila la posicion de memoria
                 		pop r12
                 .ENDMACRO
                 
                 .DSEG
                 .ORG 0x100
000100           	VAL_TensionADCH: .Byte 1
000101           	VAL_TensionADCL: .Byte 1
000102           	VAL_CorrienteADCH: .Byte 1
000103           	VAL_CorrienteADCL: .Byte 1
000104           	TensionH: .Byte 1
000105           	TensionL: .Byte 1
000106           	PotenciaH: .Byte 1
000107           	PotenciaL: .Byte 1
000108           	CorrienteH: .Byte 1
000109           	CorrienteL: .Byte 1
00010a           	RestodivL: .Byte 1
00010b           	RestodivH: .Byte 1
00010c           	VECTOR: .Byte 5
000111           	DATO_RX: .Byte 1
000112           	GRANDEH: .Byte 1
000113           	GRANDEL: .Byte 1
000114           	Temp1: .Byte 1
000115           	Temp2: .Byte 1
000116           	Temp3: .Byte 1
                 
                 
                 ;########################################################## VECTORES DE INTERRUPCION #########################################################
                 
                 .CSEG
                 .ORG 0x00
000000 940c 0035 	jmp INICIO
                 
                 .ORG 0x000A
00000a 940c 0161 	jmp RTI_SELECT
                 	
                 .ORG 0x001A
00001a 940c 0079 	jmp RTI_TIMER1_OVF
                 
                 .ORG 0x0024
000024 940c 035e 	jmp USART_RXC
                 
                 .ORG 0x34
000034 9518      	reti
                 
                 ;################################################################################################################################## 
                 ;########################################################## CONFIGURACION #########################################################
                 ;##################################################################################################################################
                 
                 	INICIO:
                 
000035 e008      		ldi r16, high(ramend)		;Configuracion de pila
000036 bf0e      		out sph, r16
000037 ef0f      		ldi r16, low(ramend)
000038 bf0d      		out spl, r16
                 
                 ;########################################################## CONFIGURACION ADC #########################################################
                 
000039 e003      		ldi r16, (1<<ADC1D)|(1<<ADC0D)	
00003a 9300 007e 		sts DIDR0, r16				;Descativo entrada digital de los pines ADC0 y ADC1
                 
                 ;########################################################## CONFIGURACION  de PINES y PCINT0 #########################################################
                 
00003c e000      		ldi r16, (0<<DDD7)|(0<<DDD6)|(0<<DDD5)			
00003d b90a      		out DDRD,r16				;Pines como entrada interrupcion de PCIE2
00003e ee00      		ldi r16, (1<<PD7)|(1<<PD6)|(1<<PD5)				
00003f b90b      		out PORTD, r16				;Resistencias Pull Up
000040 e004      		ldi r16, (1<<PCIE2)			;Habilito int por cambio de pines[7:0] (PCIE2)
000041 9300 0068 		sts PCICR, r16
000043 ee00      		ldi r16, 0b1110_0000		;Habilito los pines 7-6-5 de interrupcion (PCINT 23 - 22 - 21)
000044 9300 006d 		sts PCMSK2, r16
000046 e20e      		ldi r16, (1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB5)	
000047 b904      		out DDRB, r16				;Como salida PB1-9(OC1A), PB2-10(OC1B)|| PB5-13(CSK), PB3-11(MOSI)
000048 e200      		ldi r16, (1<<DDC5)			;Pin PC5-A5 (Load) como salida
000049 b907      		out DDRC, r16
                 
                 ;########################################################## CONFIGURACION DE TIMER/COMP 1 #########################################################
                 		
00004a ea03      		ldi r16, (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(1<<WGM10) 
00004b 9300 0080 		sts TCCR1A, r16				;Modo fase correcta PWM, comparacion igual no invertido, resolucion 10-bit
00004d e00a      		ldi r16, (1<<WGM12)|(0<<WGM13)|(0<<CS12)|(1<<CS11)|(0<<CS10)  
00004e 9300 0081 		sts TCCR1B, r16				;Selector de reloj de timer/counter: Clock_I-O/8(from prescaler)
                 
000050 e001      		ldi r16, (1<<TOIE1)			;Interrupcion de salida del temporizador/contador  
000051 9300 006f 		sts TIMSK1, r16
                 		
000053 e000      		ldi r16, 0x00
000054 9300 0089 		sts OCR1AH, r16
000056 9300 0088 		sts OCR1AL, r16
000058 9300 008b 		sts OCR1BH, r16
00005a 9300 008a 		sts OCR1BL, r16
                 
                 ;########################################################## CONFIGURACION DE USART #########################################################
                 
00005c e607      		ldi r16, 103				;Velocidad de transmicion 9600 Bd
00005d e010      		ldi r17, 0
00005e 9310 00c5 		sts UBRR0H, r17
000060 9300 00c4 		sts UBRR0L, r16
                 
000062 e908      		ldi r16, (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)	
000063 9300 00c1 		sts UCSR0B, r16				;Habilita interrupción por recepción, Habilita recepción, Habilita transmición
                 			
000065 e006      		ldi r16, (0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)	
000066 9300 00c2 		sts UCSR0C, r16				;Stop Bit 1, 8 bits				
                 
                 ;########################################################## CONFIGURACION DEL MAX #########################################################
                 
000068 940e 00ae 		call CONFIG_MAX				;Inicializar MAX
                 
00006a 9478      		sei							;Habilitacion global de interrupciones				
                 
                 ;################################################################################################################################## 
                 ;############################################################# PROGRAMA ###########################################################
                 ;##################################################################################################################################
                 
                 ;########################################################## BUCLE PRINCIPAL #########################################################
                 		
                 	BUCLE:
00006b 940e 0190 		call ADC0
00006d 940e 01a6 		call ADC1
00006f 940e 01bc 		call CALCULO_TENSION
000071 940e 01df 		call CALCULO_CORRIENTE
000073 940e 01f5 		call CALCULO_POTENCIA
000075 940e 03e5 		call USART_COMPARACION
000077 940c 006b 		jmp BUCLE
                 
                 ;########################################################## TRATAMIENTO DE INTERRUPCION DEL TIMER1 (salidas PWM 1-5 V) #########################################################
                 
                 	RTI_TIMER1_OVF:			
000079 92cf
00007a b6cf
00007b 92cf
00007c 92df
00007d 92ef
00007e 92ff
00007f 930f
000080 931f
000081 932f
000082 933f
000083 934f
000084 935f
000085 936f
000086 937f
000087 938f
000088 939f
000089 93af
00008a 93bf      		PUSH_SREG					;Guardo en la pila la posicion de memoria
                 								
00008b 9150 0100 		lds r21, VAL_TensionADCH
00008d 9350 0089 		sts OCR1AH, r21				;Salida PWMA timer OC1A
00008f 9150 0101 		lds r21, VAL_TensionADCL	
000091 9350 0088 		sts OCR1AL, r21
                 			
000093 9140 0102 		lds r20, VAL_CorrienteADCH
000095 9340 008b 		sts OCR1BH, r20				;Salida PWMB timer OC1B
000097 9140 0103 		lds r20, VAL_CorrienteADCL	
000099 9340 008a 		sts OCR1BL, r20
                 			
00009b 91bf
00009c 91af
00009d 919f
00009e 918f
00009f 917f
0000a0 916f
0000a1 915f
0000a2 914f
0000a3 913f
0000a4 912f
0000a5 911f
0000a6 910f
0000a7 90ff
0000a8 90ef
0000a9 90df
0000aa 90cf
0000ab becf
0000ac 90cf      		POP_SREG					;Recupero el valor de la pila
0000ad 9518      		reti
                 
                 ;########################################################## CONFIGURACION SPI Modo - MAESTRO ######################################################### 
                 
                 	CONFIG_MAX:
                 
0000ae e511      		ldi r17,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	
0000af bd1c      		out SPCR,r17				;Habilitar SPI como Master, Velocidad de reloj f/16 (1Mhz)
                 			
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETEAR BRILLO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 					
0000b0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000b1 b918      		out PORTC, r17
0000b2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000b3 e01a      		ldi r17, 0x0A
0000b4 bd1e      		out SPDR, r17				;Entrar Set Brillo MAX
0000b5 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000b7 0000      		nop
0000b8 e010      		ldi r17, 0x00
0000b9 bd1e      		out SPDR,r17				;Setear el brillo MAX al Minimo
0000ba 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000bc 0000      		nop
0000bd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000be b918      		out PORTC, r17
0000bf 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETEAR MODOS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000c0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000c1 b918      		out PORTC, r17
0000c2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000c3 e019      		ldi r17, 0x09
0000c4 bd1e      		out SPDR, r17				;Entrar en modo de codificacion
0000c5 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000c7 0000      		nop
0000c8 e01f      		ldi r17, 0x0F
0000c9 bd1e      		out SPDR,r17				;Setear Code B decode for digits 30 No decode for digits 74
0000ca 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000cc 0000      		nop
0000cd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000ce b918      		out PORTC, r17
0000cf 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SCAN LIMIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000d0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000d1 b918      		out PORTC, r17
0000d2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000d3 e01b      		ldi r17, 0x0B
0000d4 bd1e      		out SPDR, r17				;Entrar Scan Limit
0000d5 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000d7 0000      		nop
0000d8 e015      		ldi r17, 0x05
0000d9 bd1e      		out SPDR,r17				;Display digits 0 1 2 3 4 5
0000da 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000dc 0000      		nop
0000dd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000de b918      		out PORTC, r17
0000df 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Setear Modo ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000e0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000e1 b918      		out PORTC, r17
0000e2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000e3 e01c      		ldi r17, 0x0C
0000e4 bd1e      		out SPDR, r17				;Entrar MODO
0000e5 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000e7 0000      		nop
0000e8 e011      		ldi r17, 1
0000e9 bd1e      		out SPDR,r17				;Normal Operation
0000ea 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000ec 0000      		nop
0000ed e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000ee b918      		out PORTC, r17
0000ef 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Setear TEST ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0000f0 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0000f1 b918      		out PORTC, r17
0000f2 0000      		nop							;Cumplir tcss de hoja de datos MAX
0000f3 e01f      		ldi r17, 0x0F
0000f4 bd1e      		out SPDR, r17				;Entrar TEST
0000f5 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000f7 0000      		nop
0000f8 e010      		ldi r17, 0
0000f9 bd1e      		out SPDR,r17				;Normal Operation
0000fa 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0000fc 0000      		nop
0000fd e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0000fe b918      		out PORTC, r17
0000ff 0000      		nop
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar digitos en "HELLO" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000100 e010      		ldi r17, (0<<PC5)			;Mando 0 a PB4 para indicarle a MAX que inicia transferencia de datos
000101 b918      		out PORTC, r17
000102 0000      		nop							;Cumplir tcss de hoja de datos MAX
000103 e011      		ldi r17, 0x01
000104 bd1e      		out SPDR, r17				;Digito 0
000105 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000107 0000      		nop
000108 e010      		ldi r17, 0x00
000109 bd1e      		out SPDR,r17				;O
00010a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00010c 0000      		nop
00010d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00010e b918      		out PORTC, r17
00010f 0000      		nop
                 
000110 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000111 b918      		out PORTC, r17
000112 0000      		nop							;Cumplir tcss de hoja de datos MAX
000113 e012      		ldi r17, 0x02
000114 bd1e      		out SPDR, r17				;Digito 1
000115 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000117 0000      		nop
000118 e01d      		ldi r17, 0x0D
000119 bd1e      		out SPDR,r17				;L
00011a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00011c 0000      		nop
00011d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00011e b918      		out PORTC, r17
00011f 0000      		nop
                 
000120 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000121 b918      		out PORTC, r17
000122 0000      		nop							;Cumplir tcss de hoja de datos MAX
000123 e013      		ldi r17, 0x03
000124 bd1e      		out SPDR, r17				;Digito 2
000125 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000127 0000      		nop
000128 e01d      		ldi r17, 0x0D
000129 bd1e      		out SPDR,r17				;L
00012a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00012c 0000      		nop
00012d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00012e b918      		out PORTC, r17
00012f 0000      		nop
                 
000130 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000131 b918      		out PORTC, r17
000132 0000      		nop							;Cumplir tcss de hoja de datos MAX
000133 e014      		ldi r17, 0x04
000134 bd1e      		out SPDR, r17				;Digito 3
000135 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000137 0000      		nop
000138 e01b      		ldi r17, 0x0B
000139 bd1e      		out SPDR,r17				;E
00013a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00013c 0000      		nop
00013d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00013e b918      		out PORTC, r17
00013f 0000      		nop
                 
000140 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000141 b918      		out PORTC, r17
000142 0000      		nop							;Cumplir tcss de hoja de datos MAX
000143 e015      		ldi r17, 0x05
000144 bd1e      		out SPDR, r17				;Digito 4
000145 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000147 0000      		nop
000148 e317      		ldi r17, 0x37
000149 bd1e      		out SPDR,r17				;H
00014a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00014c 0000      		nop
00014d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00014e b918      		out PORTC, r17
00014f 0000      		nop
                 
000150 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000151 b918      		out PORTC, r17
000152 0000      		nop							;Cumplir tcss de hoja de datos MAX
000153 e016      		ldi r17, 0x06
000154 bd1e      		out SPDR, r17				;Digito 5
000155 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000157 0000      		nop
000158 e010      		ldi r17, 0x00
000159 bd1e      		out SPDR,r17				;0
00015a 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00015c 0000      		nop
00015d e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00015e b918      		out PORTC, r17
00015f 0000      		nop
000160 9508      		ret
                 		
                 ;########################################################## INTERRUPCION POR PCINT0 #########################################################
                 
                 	RTI_SELECT:
000161 92cf
000162 b6cf
000163 92cf
000164 92df
000165 92ef
000166 92ff
000167 930f
000168 931f
000169 932f
00016a 933f
00016b 934f
00016c 935f
00016d 936f
00016e 937f
00016f 938f
000170 939f
000171 93af
000172 93bf      		PUSH_SREG
                 
000173 b109      		in r16, PIND
000174 ff07      		sbrs r16, 7					;Pregunta si PD7 esta en 0
000175 940e 044d 		call MOSTRAR_POTENCIA_MAX	;Llama funcion para mostrar potencia
000177 ff06      		sbrs r16, 6					;Pregunta si PD6 esta en 0
000178 940e 0424 		call MOSTRAR_CORRIENTE_MAX	;Llama funcion para mostrar potencia
00017a ff05      		sbrs r16, 5					;Pregunta si PD5 esta en 0
00017b 940e 03fb 		call MOSTRAR_TENSION_MAX	;Llama funcion para mostrar tension
                 			
00017d 91bf
00017e 91af
00017f 919f
000180 918f
000181 917f
000182 916f
000183 915f
000184 914f
000185 913f
000186 912f
000187 911f
000188 910f
000189 90ff
00018a 90ef
00018b 90df
00018c 90cf
00018d becf
00018e 90cf      		POP_SREG
00018f 9518      		reti
                 
                 ;########################################################## SUBRUTINA PARA LEER ADC0 ###################################################################
                 	
                 	ADC0:
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000190 e400      		ldi r16, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0) 
000191 9300 007c 		sts ADMUX, r16				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC0  
                 		
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
000193 ee0f      		ldi r16, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
000194 9300 007a 		sts ADCSRA, r16				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)
000196 e006      		ldi r16, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
000197 9300 007b 		sts ADCSRB, r16				;Timer/Counter1 Overflow
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 	LEER_ADC0:
                 
000199 9100 007a 		lds r16, ADCSRA				;Cargar el control ADCSRA
00019b fd06      		SBRC r16, 6					;Saltar si se completo la conversion ADCS = 0
00019c cffc      		rjmp LEER_ADC0 
                 			
00019d 9110 0078 		lds r17, ADCL				;Cargar parte baja del ADC
00019f 9100 0079 		lds r16, ADCH				;Cargar parte alta del ADC
0001a1 9310 0103 		sts VAL_CorrienteADCL, r17	;Guardar el valor de ADC en VAL_CorrienteADC
0001a3 9300 0102 		sts VAL_CorrienteADCH, r16
                 	
0001a5 9508      		ret
                 			
                 ;################################################################### SUBRUTINA PARA LEER ADC1 ###################################################################
                 
                 	ADC1:
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0001a6 e421      		ldi r18, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0) 
0001a7 9320 007c 		sts ADMUX, r18				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC1    
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
0001a9 ee2f      		ldi r18, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
0001aa 9320 007a 		sts ADCSRA, r18				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)  
0001ac e026      		ldi r18, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
0001ad 9320 007b 		sts ADCSRB, r18				;Timer/Counter1 Overflow
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 	LEER_ADC1:
                 
0001af 9120 007a 		lds r18, ADCSRA				;Cargar el control ADCSRA
0001b1 fd26      		sbrc r18, 6					;Saltar si se completo la conversion ADCS = 0
0001b2 cffc      		rjmp LEER_ADC1 
                 			
0001b3 9120 0078 		lds r18, ADCL				;Cargar parte baja del ADC
0001b5 9130 0079 		lds r19, ADCH				;Cargar parte alta del ADC
0001b7 9320 0101 		sts VAL_TensionADCL, r18	;Guardar el valor de ADC en VAL_TensionADC
0001b9 9330 0100 		sts VAL_TensionADCH, r19
                 	
0001bb 9508      		ret	
                 
                 ;################################################################### CALCULO DE TENSION ###################################################################
                 	
                 	CALCULO_TENSION:
                 		
0001bc 9170 0100 		lds R23, VAL_TensionADCH
0001be 9160 0101 		lds R22, VAL_TensionADCL	;Carga el numero VAL_Tension en r23:r22
0001c0 e050      		ldi R21,0x00
0001c1 e148      		ldi R20,0x18				;Carga el numero 24 r21:r20
0001c2 940e 0267 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
0001c4 9310 0112 		sts GRANDEH, r17			;Guardamos resultado de la primer multiplicacion
0001c6 9300 0113 		sts GRANDEL, r16
                 
0001c8 9170 0100 		lds R23, VAL_TensionADCH
0001ca 9160 0101 		lds R22, VAL_TensionADCL	;Carga el numero VAL_Tension en r23:r22
0001cc e050      		ldi R21,0x00
0001cd e24b      		ldi R20,0x2B				;Carga el numero 43 r21:r20
0001ce 940e 0267 		call mul16x16_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
                 	
0001d0 e624      		ldi	DivisorL,0x64			;El dividendo ya esta en r16 y r17
0001d1 e030      		ldi	DivisorH,0x00			;Dividimos por 100
0001d2 940e 0279 		call Division16_16
                 
0001d4 9130 0112 		lds r19, GRANDEH
0001d6 9120 0113 		lds r18, GRANDEL
                 
0001d8 0f31      		add r19, DividendoH			;Sumamos primer calculo con segundo calculo
0001d9 1f20      		adc r18, DividendoL
0001da 9330 0104 		sts	TensionH, r19			;Valor de la tension real
0001dc 9320 0105 		sts	TensionL, r18
0001de 9508      		ret
                 
                 ;################################################################### CALCULO DE CORRIENTE ###################################################################
                  
                 	CALCULO_CORRIENTE:
                 
0001df 9170 0102 		lds r23, VAL_CorrienteADCH	;Carga valores del ADC
0001e1 9160 0103 		lds r22, VAL_CorrienteADCL
0001e3 e081      		ldi r24, 0x01				;Carga complemento de 511 para restar
0001e4 ef9e      		ldi r25, 0xFE
0001e5 0f68      		add r22, r24				;Realiza suma (resta)
0001e6 1f79      		adc r23, r25
0001e7 e070      		ldi r23, 0x00				;Ponemos 0 en la parte alta del resultado
0001e8 e052      		ldi r21, 0x02				;Carga 587 (factor para adecuar la medicion) para multiplicar
0001e9 e44b      		ldi r20, 0x4B
0001ea 940e 0267 		call mul16x16_16			;Llama funcion multiplicacion
                 
0001ec e030      		ldi DivisorH, 0x00			;Carga 10 en el divisor (para obtener nuestro factor >> 0.0587)
0001ed e02a      		ldi DivisorL, 0x0A
0001ee 940e 0279 		call Division16_16			;Llama funcion division
                 
0001f0 9310 0108 		sts CorrienteH, r17			;Resultado corriente
0001f2 9300 0109 		sts CorrienteL, r16				
0001f4 9508      		ret
                 
                 ;################################################################### CALCULO DE POTENCIA ###################################################################
                  
                 	CALCULO_POTENCIA:
                 
0001f5 9110 0104 		lds DividendoH, TensionH	;Cargar valor de tension
0001f7 9100 0105 		lds DividendoL, TensionL
0001f9 e033      		ldi DivisorH, 0x03			;Cargar 1000 en divisor
0001fa ee28      		ldi DivisorL, 0xE8
0001fb 940e 0279 		call Division16_16			;Llamar funcion division
0001fd 9310 0112 		sts GRANDEH, r17			;Guardar resultado
0001ff 9300 0113 		sts GRANDEL, r16
                 
000201 2d1f      		mov DividendoH, RestoH		;Cargar resto para dividir
000202 2d0e      		mov DividendoL, RestoL
000203 e030      		ldi DivisorH, 0x00			;Cargar 100 en divisor
000204 e624      		ldi DivisorL, 0x64
000205 940e 0279 		call Division16_16			;Llamar funcion division		
000207 9300 0114 		sts Temp1, r16				;Guardar resultado (primer decimal)
                 
000209 2d1f      		mov DividendoH, RestoH		;Cargar resto para dividir
00020a 2d0e      		mov DividendoL, RestoL
00020b e030      		ldi DivisorH, 0x00			;Cargar 10 en divisor
00020c e02a      		ldi DivisorL, 0x0A
00020d 940e 0279 		call Division16_16			;Llamar funcion division
00020f 9300 0115 		sts Temp2, r16				;Guardar resultado (segundo decimal)
000211 92e0 0116 		sts Temp3, RestoL			;Guardar resto (tercer decimal)
                 
000213 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
000215 9160 0109 		lds r22, CorrienteL
000217 9150 0112 		lds r21, GRANDEH			;Cargar valor entero de tension
000219 9140 0113 		lds r20, GRANDEL
00021b 940e 0267 		call mul16x16_16			;Llamar funcion multiplicacion
00021d 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
00021f 9300 0107 		sts PotenciaL, r16
                 
000221 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
000223 9160 0109 		lds r22, CorrienteL
000225 e050      		ldi r21, 0x00				;Cargar valor del primer decimal
000226 9140 0114 		lds r20, Temp1
000228 940e 0267 		call mul16x16_16			;Llamar funcion multiplicacion
00022a e030      		ldi DivisorH, 0x00			;Cargar 10 en divisor para acomodar numero
00022b e02a      		ldi DivisorL, 0x0A
00022c 940e 0279 		call Division16_16			;Llamar funcion division		
00022e 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
000230 9120 0107 		lds r18, PotenciaL
000232 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
000233 1f13      		adc r17, r19
000234 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
000236 9300 0107 		sts PotenciaL, r16
                 
000238 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
00023a 9160 0109 		lds r22, CorrienteL
00023c e050      		ldi r21, 0x00				;Cargar valor del segundo decimal
00023d 9140 0115 		lds r20, Temp2
00023f 940e 0267 		call mul16x16_16			;Llamar funcion multiplicacion
000241 e030      		ldi DivisorH, 0x00			;Cargar 100 en divisor para acomodar numero
000242 e624      		ldi DivisorL, 0x64
000243 940e 0279 		call Division16_16			;Llamar funcion division		
000245 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
000247 9120 0107 		lds r18, PotenciaL
000249 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
00024a 1f13      		adc r17, r19
00024b 9310 0106 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
00024d 9300 0107 		sts PotenciaL, r16
                 
00024f 9170 0108 		lds r23, CorrienteH			;Cargar valor de corriente
000251 9160 0109 		lds r22, CorrienteL
000253 e050      		ldi r21, 0x00				;Cargar valor del segundo decimal
000254 9140 0116 		lds r20, Temp3
000256 940e 0267 		call mul16x16_16			;Llamar funcion multiplicacion
000258 e033      		ldi DivisorH, 0x03			;Cargar 1000 en divisor para acomodar numero
000259 ee28      		ldi DivisorL, 0xE8
00025a 940e 0279 		call Division16_16			;Llamar funcion division		
00025c 9130 0106 		lds r19, PotenciaH			;Cargar valor temporal de potencia
00025e 9120 0107 		lds r18, PotenciaL
000260 0f02      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
000261 1f13      		adc r17, r19
000262 9310 0106 		sts PotenciaH, r17			;Guardar resultado de la potencia
000264 9300 0107 		sts PotenciaL, r16
                 
000266 9508      		ret
                 		
                 ;################################################################### FUNCION DE MULTIPLICACION ###################################################################
                 
                 	mul16x16_16:
                 
000267 9f64      		mul	r22, r20				;Multiplica parte baja de A con parte baja de B
000268 0180      		movw	r17:r16, r1:r0
000269 9f74      		mul	r23, r20				;Multiplica parte alta de A con parte baja de B
00026a 0d10      		add	r17, r0
00026b 9f56      		mul	r21, r22				;Multiplica parte baja de A con parte alta de B
00026c 0d10      		add	r17, r0
                 									;Resultado r17, r16
00026d 9508      		ret
                 
                 ;############################################################ FUNCION DE MULTIPLICACION DEL RESTO ###################################################################
                 
                 	mul16x16_24:
00026e 9f75      		mul		r23, r21			;Multiplica parte alta de A con parte alta de B
00026f 2d20      		mov		r18, r0
000270 9f64      		mul		r22, r20			;Multiplica parte baja de A con parte baja de B
000271 0180      		movw	r17:r16, r1:r0
000272 9f74      		mul		r23, r20			;Multiplica parte alta de A con parte baja de Bah * bl
000273 0d10      		add		r17, r0
000274 1d21      		adc		r18, r1
000275 9f56      		mul		r21, r22			;Multiplica parte baja de A con parte alta de B
000276 0d10      		add		r17, r0
000277 1d21      		adc		r18, r1
                 									;Resultado r18, r17, r16
000278 9508      		ret
                 
                 
                 ;################################################################### FUNCION DE DIVISION ###################################################################
                 
                 	Division16_16:	
000279 24ee      		clr	RestoL					;Borra byte low de Resto
00027a 18ff      		sub	RestoH,RestoH			;Borra el byte alto y acarreo
00027b e141      		ldi	Contador,17				;Contador de bucle infinito
                 		div_1:	
00027c 1f00      		rol	DividendoL				;Desplazo a la izquierda el dividendo
00027d 1f11      		rol	DividendoH
00027e 954a      		dec	Contador				;Decremento contador
00027f f429      		brne	div_2				;if done
000280 92e0 010a 		sts RestodivL, RestoL
000282 92f0 010b 		sts RestodivH, RestoH
000284 9508      		ret							;Salida
                 		div_2:	
000285 1cee      		rol	RestoL					;Resplazo a la izquerda el resto
000286 1cff      		rol	RestoH
000287 1ae2      		sub	RestoL,DivisorL			;Resto = resto - divisor
000288 0af3      		sbc	RestoH,DivisorH	
000289 f420      		brcc	div_3				;Si el resultado es negativo
00028a 0ee2      		add	RestoL,DivisorL			;Restaurar el resto
00028b 1ef3      		adc	RestoH,DivisorH
00028c 9488      		clc							;Limpia el acarreo para ser deplazado al resultado
00028d cfee      		rjmp	div_1				;Else
                 		div_3:	
00028e 9408      		sec							;Pone a 1 la bandera de acarreo para ser trasladado al resultado
00028f cfec      		rjmp	div_1
                 									;Resultado de la division r17, r16
                 									;Resto de la division r15, r14
                 
                 ;########################################################## MOSTRAR POTENCIA #########################################################
                 
                 	MOSTRAR_POTENCIA:
                 		
000290 90d0 0106 		lds ENTEROH, PotenciaH		;Cargar valor de potencia alta
000292 90c0 0107 		lds ENTEROL, PotenciaL		;Cargar valor de potencia baja
                 		
000294 940e 038c 		call DESCOMPOSICION
                 				
000296 940e 0387 		call USART_ESPERA			
000298 e540      		ldi r20, 0x50				; P
000299 9340 00c6 		sts UDR0, r20
                 
00029b 940e 0387 		call USART_ESPERA
00029d e240      		ldi r20, 0x20				; (espacio)
00029e 9340 00c6 		sts UDR0, r20
                 
0002a0 940e 0387 		call USART_ESPERA			
0002a2 e34d      		ldi r20, 0x3D				; =
0002a3 9340 00c6 		sts UDR0, r20
                 
0002a5 940e 0387 		call USART_ESPERA
0002a7 e240      		ldi r20, 0x20				; (espacio)
0002a8 9340 00c6 		sts UDR0, r20
                 
0002aa 940e 03b1 		call MOSTRAR
                 
0002ac 940e 0387 		call USART_ESPERA
0002ae e240      		ldi r20, 0x20				; (espacio)
0002af 9340 00c6 		sts UDR0, r20
                 
0002b1 940e 0387 		call USART_ESPERA			
0002b3 e547      		ldi r20, 0x57				; W
0002b4 9340 00c6 		sts UDR0, r20
                 
0002b6 940e 0387 		call USART_ESPERA			
0002b8 e641      		ldi r20, 0x61				; a
0002b9 9340 00c6 		sts UDR0, r20
                 
0002bb 940e 0387 		call USART_ESPERA			
0002bd e744      		ldi r20, 0x74				; t
0002be 9340 00c6 		sts UDR0, r20
                 
0002c0 940e 0387 		call USART_ESPERA			
0002c2 e744      		ldi r20, 0x74				; t
0002c3 9340 00c6 		sts UDR0, r20
                 
0002c5 940e 0387 		call USART_ESPERA			
0002c7 e04a      		ldi r20, 0x0A				; (salto de linea)
0002c8 9340 00c6 		sts UDR0, r20
                 
0002ca 940e 0387 		call USART_ESPERA			
0002cc e04d      		ldi r20, 0x0D				; (retorno de carro)
0002cd 9340 00c6 		sts UDR0, r20
                 
0002cf 2711      		clr r17						;Limpiar registro de dato recibido
0002d0 9310 0111 		sts DATO_RX, r17
                 	
0002d2 9508      		ret
                 
                 ;######################################################### MOSTRAR CORRIENTE #########################################################
                 
                 	MOSTRAR_CORRIENTE:
                 		
0002d3 90d0 0108 		lds ENTEROH, CorrienteH		;Cargar valor de corriente alta
0002d5 90c0 0109 		lds ENTEROL, CorrienteL		;Cargar valor de corriente baja
                 		
0002d7 940e 038c 		call DESCOMPOSICION
                 				
0002d9 940e 0387 		call USART_ESPERA			
0002db e449      		ldi r20, 0x49				; I
0002dc 9340 00c6 		sts UDR0, r20
                 
0002de 940e 0387 		call USART_ESPERA
0002e0 e240      		ldi r20, 0x20				; (espacio)
0002e1 9340 00c6 		sts UDR0, r20
                 
0002e3 940e 0387 		call USART_ESPERA			
0002e5 e34d      		ldi r20, 0x3D				; =
0002e6 9340 00c6 		sts UDR0, r20
                 
0002e8 940e 0387 		call USART_ESPERA
0002ea e240      		ldi r20, 0x20				; (espacio)
0002eb 9340 00c6 		sts UDR0, r20
                 
0002ed 940e 03b1 		call MOSTRAR
                 
0002ef 940e 0387 		call USART_ESPERA
0002f1 e240      		ldi r20, 0x20				; (espacio)
0002f2 9340 00c6 		sts UDR0, r20
                 
0002f4 940e 0387 		call USART_ESPERA			
0002f6 e441      		ldi r20, 0x41				; A
0002f7 9340 00c6 		sts UDR0, r20
                 
0002f9 940e 0387 		call USART_ESPERA			
0002fb e64d      		ldi r20, 0x6D				; m
0002fc 9340 00c6 		sts UDR0, r20
                 
0002fe 940e 0387 		call USART_ESPERA			
000300 e740      		ldi r20, 0x70				; p
000301 9340 00c6 		sts UDR0, r20
                 
000303 940e 0387 		call USART_ESPERA			
000305 e645      		ldi r20, 0x65				; e
000306 9340 00c6 		sts UDR0, r20
                 		
000308 940e 0387 		call USART_ESPERA			
00030a e742      		ldi r20, 0x72				; r
00030b 9340 00c6 		sts UDR0, r20
                 
00030d 940e 0387 		call USART_ESPERA			
00030f e04a      		ldi r20, 0x0A				; (salto de linea)
000310 9340 00c6 		sts UDR0, r20
                 
000312 940e 0387 		call USART_ESPERA			
000314 e04d      		ldi r20, 0x0D				; (retorno de carro)
000315 9340 00c6 		sts UDR0, r20
                 
000317 2711      		clr r17						;Limpiar registro de dato recibido
000318 9310 0111 		sts DATO_RX, r17
                 	
00031a 9508      		ret
                 
                 ;########################################################## MOSTRAR TENSION #########################################################
                 
                 	MOSTRAR_TENSION:
                 
00031b 90d0 0104 		lds ENTEROH, TensionH		;Cargar valor de tension alta
00031d 90c0 0105 		lds ENTEROL, TensionL		;Cargar valor de tension baja
                 		
00031f 940e 038c 		call DESCOMPOSICION
                 				
000321 940e 0387 		call USART_ESPERA			
000323 e546      		ldi r20, 0x56				; V
000324 9340 00c6 		sts UDR0, r20
                 
000326 940e 0387 		call USART_ESPERA
000328 e240      		ldi r20, 0x20				; (espacio)
000329 9340 00c6 		sts UDR0, r20
                 
00032b 940e 0387 		call USART_ESPERA			
00032d e34d      		ldi r20, 0x3D				; =
00032e 9340 00c6 		sts UDR0, r20
                 
000330 940e 0387 		call USART_ESPERA
000332 e240      		ldi r20, 0x20				; (espacio)
000333 9340 00c6 		sts UDR0, r20
                 
000335 940e 03b1 		call MOSTRAR
                 
000337 940e 0387 		call USART_ESPERA
000339 e240      		ldi r20, 0x20				; (espacio)
00033a 9340 00c6 		sts UDR0, r20
                 
00033c 940e 0387 		call USART_ESPERA			
00033e e546      		ldi r20, 0x56				; V
00033f 9340 00c6 		sts UDR0, r20
                 
000341 940e 0387 		call USART_ESPERA			
000343 e64f      		ldi r20, 0x6F				; o
000344 9340 00c6 		sts UDR0, r20
                 
000346 940e 0387 		call USART_ESPERA			
000348 e64c      		ldi r20, 0x6C				; l
000349 9340 00c6 		sts UDR0, r20
                 
00034b 940e 0387 		call USART_ESPERA			
00034d e744      		ldi r20, 0x74				; t
00034e 9340 00c6 		sts UDR0, r20
                 		
000350 940e 0387 		call USART_ESPERA			
000352 e04a      		ldi r20, 0x0A				; (salto de linea)
000353 9340 00c6 		sts UDR0, r20
                 
000355 940e 0387 		call USART_ESPERA			
000357 e04d      		ldi r20, 0x0D				; (retorno de carro)
000358 9340 00c6 		sts UDR0, r20
                 
00035a 2711      		clr r17						;Limpiar registro de dato recibido
00035b 9310 0111 		sts DATO_RX, r17
00035d 9508      		ret
                 
                 ;########################################################## USART RECEPCION #########################################################
                 
                 	USART_RXC:
                 
00035e 92cf
00035f b6cf
000360 92cf
000361 92df
000362 92ef
000363 92ff
000364 930f
000365 931f
000366 932f
000367 933f
000368 934f
000369 935f
00036a 936f
00036b 937f
00036c 938f
00036d 939f
00036e 93af
00036f 93bf      		PUSH_SREG
000370 9100 00c6 		lds r16, UDR0
000372 9300 0111 		sts DATO_RX, r16
000374 91bf
000375 91af
000376 919f
000377 918f
000378 917f
000379 916f
00037a 915f
00037b 914f
00037c 913f
00037d 912f
00037e 911f
00037f 910f
000380 90ff
000381 90ef
000382 90df
000383 90cf
000384 becf
000385 90cf      		POP_SREG
000386 9518      		reti
                 
                 ;########################################################## USART ESPERA #########################################################
                 
                 	USART_ESPERA:
                 
000387 91a0 00c0 		lds r26, UCSR0A				;Espera que se limpie la bandera de transmision
000389 ffa5      		sbrs r26, UDRE0
00038a cffc      		rjmp USART_ESPERA
00038b 9508      		ret
                 
                 ;########################################################## DESCOMPOSICION ENTERO #########################################################
                 		
                 	DESCOMPOSICION:
                 
00038c e0ec      		ldi	ZL, LOW(VECTOR)
00038d e0f1      		ldi	ZH, HIGH(VECTOR)			
00038e e277      		ldi rmp, 0x27				;Cargamos 10000
00038f 2f67      		mov rBin2H,rmp
000390 e170      		ldi rmp, 0x10
000391 2f57      		mov rBin2L,rmp
000392 d012      		rcall Bin2ToDigit			;Funcion para calcular digito
000393 e073      		ldi rmp, 0x03				;Cargamos 1000
000394 2f67      		mov rBin2H,rmp
000395 ee78      		ldi rmp, 0xE8
000396 2f57      		mov rBin2L,rmp
000397 d00d      		rcall Bin2ToDigit			;Funcion para calcular digito
000398 e070      		ldi rmp, 0x00				;Cargamos 100
000399 2f67      		mov rBin2H,rmp
00039a e674      		ldi rmp, 0x64
00039b 2f57      		mov rBin2L,rmp
00039c d008      		rcall Bin2ToDigit			;Funcion para calcular digito
00039d e070      		ldi rmp, 0x00				;Cargamos 10
00039e 2f67      		mov rBin2H,rmp
00039f e07a      		ldi rmp, 0x0A
0003a0 2f57      		mov rBin2L,rmp
0003a1 d003      		rcall Bin2ToDigit			;Funcion para calcular digito
0003a2 82c0      		st z,ENTEROL
0003a3 9734      		sbiw ZL,4					;Poner el puntero en el primer BCD
0003a4 9508      		ret
                 
                 	Bin2ToDigit:
0003a5 2777      		clr rmp						;Conteo en cero
                 
                 	Bin2ToDigita:
0003a6 16d6      		cp ENTEROH,rBin2H			;Comparo nro con comparacion parte alta
0003a7 f038      		brcs Bin2ToDigitc			;Si Carry=1 el nro es menor a comparacion, vuelve a rutina para comparar con un valor menor
0003a8 f411      		brne Bin2ToDigitb	 
0003a9 16c5      		cp ENTEROL,rBin2L			;Si es igual, Comparo nro con comparacion parte baja
0003aa f020      		brcs Bin2ToDigitc			;Si Carry=1 nro menor a comparacion
                 
                 	Bin2ToDigitb:			
0003ab 1ac5      		sub ENTEROL,rBin2L			;Resto partes bajas
0003ac 0ad6      		sbc ENTEROH,rBin2H			;Resto partes altas con carry
0003ad 9573      		inc rmp						;Incremento cuenta para digito BCD
0003ae cff7      		rjmp Bin2ToDigita			;Repito el proceso hasta que sea menor a comparacion
                 
                 	Bin2ToDigitc:
0003af 9371      		st z+,rmp					;Salva el digito 
0003b0 9508      		ret
                 
                 ;########################################################## MOSTRAR ENTERO #########################################################
                 	
                 	MOSTRAR:
                 		
0003b1 940e 0387 		call USART_ESPERA
0003b3 91b1      		ld	r27, Z+					;Cargamos decena
0003b4 e3d0      		ldi r29, 48
0003b5 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0003b6 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
0003b8 940e 0387 		call USART_ESPERA
                 	
0003ba 940e 0387 		call USART_ESPERA
0003bc 91b1      		ld	r27, Z+					;Cargamos unidad
0003bd e3d0      		ldi r29, 48
0003be 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0003bf 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
0003c1 940e 0387 		call USART_ESPERA
                 
0003c3 940e 0387 		call USART_ESPERA			
0003c5 e24c      		ldi r20, 0x2C				; ,
0003c6 9340 00c6 		sts UDR0, r20				;Enviamos por puerto serie
                 
0003c8 940e 0387 		call USART_ESPERA
0003ca 91b1      		ld	r27, Z+					;Cargamos primer decimal
0003cb e3d0      		ldi r29, 48
0003cc 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0003cd 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
0003cf 940e 0387 		call USART_ESPERA
                 
0003d1 940e 0387 		call USART_ESPERA
0003d3 91b1      		ld	r27, Z+					;Cargamos segundo decimal
0003d4 e3d0      		ldi r29, 48
0003d5 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0003d6 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
0003d8 940e 0387 		call USART_ESPERA
                 	
0003da 940e 0387 		call USART_ESPERA
0003dc 81b0      		ld	r27, Z					;Cargamos tercer decimal
0003dd e3d0      		ldi r29, 48
0003de 0fbd      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
0003df 93b0 00c6 		sts UDR0,r27				;Enviamos por puerto serie
0003e1 940e 0387 		call USART_ESPERA
                 
0003e3 9734      		SBIW ZL, 4					;Poner el puntero en el primer BCD
0003e4 9508      		ret
                 		
                 ;########################################################## USART COMPARACION #########################################################
                 
                 	USART_COMPARACION:
                 		
0003e5 9100 0111 		lds r16, DATO_RX			;Cargar dato recibido
0003e7 e516      		ldi r17, 0x56				;Comparar con V
0003e8 1301      		cpse r16, r17
0003e9 c002      		rjmp I						;Si es falso, compara con I
0003ea 940e 031b 		call MOSTRAR_TENSION		
                 		I:
0003ec e419      		ldi r17, 0x49				;Comparar con I
0003ed 1301      		cpse r16, r17
0003ee c002      		rjmp P						;Si es falso, compara con P
0003ef 940e 02d3 		call MOSTRAR_CORRIENTE
                 		P:
0003f1 e510      		ldi r17, 0x50				;Comparar con P
0003f2 1301      		cpse r16, r17
0003f3 9508      		ret
0003f4 940e 0290 		call MOSTRAR_POTENCIA
0003f6 9508      		ret
                 
                 ;############################################################# SPI ESPERA ############################################################
                 
                 	SPI_ESPERA:	
0003f7 b5ad      		in r26, SPSR		
0003f8 ffa7      		sbrs r26, SPIF				; Esperar que se complete la transmisión
0003f9 cffd      		rjmp SPI_ESPERA
0003fa 9508      		ret
                 
                 ;############################################################# MOSTRAR TENSION MAX ############################################################
                 
                 	MOSTRAR_TENSION_MAX:
                 				
0003fb e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0003fc b918      		out PORTC, r17
0003fd 0000      		nop							;Cumplir tcss de hoja de datos MAX
0003fe e016      		ldi r17, 0x06
0003ff bd1e      		out SPDR, r17				;Digito 5
000400 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000402 0000      		nop
000403 e31e      		ldi r17, 0b0011_1110
000404 bd1e      		out SPDR,r17				; U
000405 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000407 0000      		nop
000408 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000409 b918      		out PORTC, r17
00040a 0000      		nop
                 
00040b e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00040c b918      		out PORTC, r17
00040d 0000      		nop							;Cumplir tcss de hoja de datos MAX
00040e e015      		ldi r17, 0x05
00040f bd1e      		out SPDR, r17				;Digito 5
000410 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000412 0000      		nop
000413 e019      		ldi r17, 0b0000_1001
000414 bd1e      		out SPDR,r17				; =
000415 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000417 0000      		nop
000418 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000419 b918      		out PORTC, r17
00041a 0000      		nop
                 
00041b 90d0 0104 		lds ENTEROH, TensionH		;Cargar valor de tension alta
00041d 90c0 0105 		lds ENTEROL, TensionL		;Cargar valor de tension baja
00041f 940e 038c 		call DESCOMPOSICION
000421 940e 0476 		call TRANSMITIR_MAX
000423 9508      		ret
                 
                 ;############################################################# MOSTRAR CORRIENTE MAX ############################################################
                 	
                 	MOSTRAR_CORRIENTE_MAX:
                 		
000424 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000425 b918      		out PORTC, r17
000426 0000      		nop							;Cumplir tcss de hoja de datos MAX
000427 e016      		ldi r17, 0x06
000428 bd1e      		out SPDR, r17				;Digito 5
000429 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00042b 0000      		nop
00042c e310      		ldi r17, 0b0011_0000
00042d bd1e      		out SPDR,r17				; I
00042e 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000430 0000      		nop
000431 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000432 b918      		out PORTC, r17
000433 0000      		nop
                 
000434 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000435 b918      		out PORTC, r17
000436 0000      		nop							;Cumplir tcss de hoja de datos MAX
000437 e015      		ldi r17, 0x05
000438 bd1e      		out SPDR, r17				;Digito 5
000439 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00043b 0000      		nop
00043c e019      		ldi r17, 0b0000_1001
00043d bd1e      		out SPDR,r17				; =
00043e 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000440 0000      		nop
000441 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000442 b918      		out PORTC, r17
000443 0000      		nop
                 
000444 90d0 0108 		lds ENTEROH, CorrienteH		;Cargar valor de corriente alta
000446 90c0 0109 		lds ENTEROL, CorrienteL		;Cargar valor de corriente baja
000448 940e 038c 		call DESCOMPOSICION
00044a 940e 0476 		call TRANSMITIR_MAX
00044c 9508      		ret
                 		
                 ;############################################################# MOSTRAR CORRIENTE MAX ############################################################
                 	
                 	MOSTRAR_POTENCIA_MAX:
                 
00044d e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00044e b918      		out PORTC, r17
00044f 0000      		nop							;Cumplir tcss de hoja de datos MAX
000450 e016      		ldi r17, 0x06
000451 bd1e      		out SPDR, r17				;Digito 5
000452 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000454 0000      		nop
000455 e617      		ldi r17, 0b0110_0111
000456 bd1e      		out SPDR,r17				; P
000457 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000459 0000      		nop
00045a e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00045b b918      		out PORTC, r17
00045c 0000      		nop
                 
00045d e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00045e b918      		out PORTC, r17
00045f 0000      		nop							;Cumplir tcss de hoja de datos MAX
000460 e015      		ldi r17, 0x05
000461 bd1e      		out SPDR, r17				;Digito 5
000462 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000464 0000      		nop
000465 e019      		ldi r17, 0b0000_1001
000466 bd1e      		out SPDR,r17				; =
000467 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000469 0000      		nop
00046a e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00046b b918      		out PORTC, r17
00046c 0000      		nop
                 
00046d 90d0 0106 		lds ENTEROH, PotenciaH		;Cargar valor de potencia alta
00046f 90c0 0107 		lds ENTEROL, PotenciaL		;Cargar valor de potencia baja
000471 940e 038c 		call DESCOMPOSICION
000473 940e 0476 		call TRANSMITIR_MAX
000475 9508      		ret
                 		
                 ;############################################################# TRANSMITIR MAX ############################################################
                 	
                 	TRANSMITIR_MAX:
                 			
                 	;ENTERO PARTE ALTA
000476 e010      		ldi r17, (0<<PC5)			;Mando 0 a PB0 para indicarle a MAX que inicia transferencia de datos
000477 b918      		out PORTC, r17
000478 0000      		nop
000479 e014      		ldi r17, 0x04
00047a bd1e      		out SPDR, r17				;Digito entero alto
00047b 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00047d 0000      		nop
                 
00047e 9111      		ld	r17, Z+						
00047f bd1e      		out SPDR, r17				;Envio digito entero alto
000480 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000482 0000      		nop
000483 e210      		ldi r17, (1<<PC5)			;Mando 1 a PB0 para indicarle a MAX que finalizo transferencia
000484 b918      		out PORTC, r17
000485 0000      		nop
                 
                 	;ENTERO PARTE BAJA
000486 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000487 b918      		out PORTC, r17
000488 0000      		nop
000489 e013      		ldi r17, 0x03
00048a bd1e      		out SPDR, r17				;Digito entero bajo
00048b 940e 03f7 		call SPI_ESPERA 			;Empezar la TX de información
00048d 0000      		nop
                 	
00048e 9111      		ld	r17, Z+						
00048f ef00      		ldi r16, 0xF0
000490 0f10      		add r17, r16				;Suma para mostrar puntto decimal
000491 bd1e      		out SPDR, r17				;Envio digito entero bajo
000492 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
000494 0000      		nop
000495 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000496 b918      		out PORTC, r17
000497 0000      		nop
                 
                 	;PRIMER DECIMAL
000498 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000499 b918      		out PORTC, r17
00049a 0000      		nop
00049b e012      		ldi r17, 0x02
00049c bd1e      		out SPDR, r17				;Digito primer decimal
00049d 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
00049f 0000      		nop
                 
0004a0 9111      		ld	r17, Z+					;Primer decimal
0004a1 bd1e      		out SPDR, r17				;Envio primer decimal
0004a2 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0004a4 0000      		nop
0004a5 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004a6 b918      		out PORTC, r17
0004a7 0000      		nop
                 
                 	;SEGUNDO DECIMAL
0004a8 e010      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0004a9 b918      		out PORTC, r17
0004aa 0000      		nop
0004ab e011      		ldi r17, 0x1
0004ac bd1e      		out SPDR, r17				;Digito segundo decimal
0004ad 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0004af 0000      		nop
                 
0004b0 9111      		ld	r17, Z+					;Segundo decimal
0004b1 bd1e      		out SPDR, r17				;Envio segundo decimal
0004b2 940e 03f7 		call SPI_ESPERA				;Empezar la TX de información
0004b4 0000      		nop
0004b5 e210      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0004b6 b918      		out PORTC, r17
0004b7 0000      		nop
                 		
0004b8 8110      		ld	r17, Z
0004b9 9734      		SBIW ZL, 4
0004ba 2711      		clr r17
                 
0004bb 9508      		ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
r0 :   7 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  27 r13:  14 r14:  14 r15:  14 
r16:  82 r17: 216 r18:  38 r19:  27 r20:  93 r21:  26 r22:  24 r23:  37 
r24:   8 r25:   8 r26:  10 r27:  21 r28:   0 r29:  10 r30:   4 r31:   1 
x  :   0 y  :   0 z  :  12 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   8 add   :  16 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   2 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 127 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :   0 cpse  :   3 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   1 jmp   :   5 
ld    :  10 ldd   :   0 ldi   : 187 lds   :  54 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  13 movw  :   2 mul   :   7 muls  :   0 mulsu :   0 
neg   :   0 nop   :  84 or    :   0 ori   :   0 out   :  94 pop   :  51 
push  :  51 rcall :   4 ret   :  23 reti  :   4 rjmp  :   9 rol   :   4 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   3 sbr   :   0 sbrc  :   2 sbrs  :   5 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  93 
sub   :   3 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000978   2336      0   2336   32768   7.1%
[.dseg] 0x000100 0x000117      0     23     23    2048   1.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
